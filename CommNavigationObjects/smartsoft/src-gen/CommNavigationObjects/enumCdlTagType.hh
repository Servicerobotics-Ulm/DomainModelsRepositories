//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMNAVIGATIONOBJECTS_CDLTAGTYPE_ENUM_H_
#define COMMNAVIGATIONOBJECTS_CDLTAGTYPE_ENUM_H_

#include <CommNavigationObjects/enumCdlTagTypeData.hh>

#include <string>
#include <iostream>
#include <locale>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

namespace CommNavigationObjects {
	
	class CdlTagType {
	private:
		CommNavigationObjectsIDL::CdlTagType value;
		
	public:
		enum ENUM_CdlTagType {
			ENUM_VALUE_UNDEFINED = 0,
			CDL_SET_MODE_STRATEGY = 1,
			CDL_SET_FREE_BEHAVIOUR = 2,
			CDL_SET_LOOKUP_TABLE = 3,
			CDL_SET_TRANS_VELOCITY = 4,
			CDL_SET_ROT_VELOCITY = 5,
			CDL_SET_MODE_GOAL = 6,
			CDL_SET_ID = 7,
			CDL_SET_GOAL = 8,
			CDL_SET_APPROACH_DIST = 9,
			CDL_SAVE_CURRENT_POS = 10,
			CDL_SET_SAFETY_CLEARENCE = 11,
			CDL_NEUTRAL = 12,
			CDL_REACTIVE = 13,
			CDL_JOYSTICK = 14,
			CDL_TURN = 15,
			CDL_APPROACH_FLAT_SURF = 16,
			CDL_APPROACH_HALT = 17,
			CDL_APPROACH = 18,
			CDL_ROTATE = 19,
			CDL_FOLLOW = 20,
			CDL_BACKWARD = 21,
			CDL_ABSOLUTE = 22,
			CDL_PLANNER = 23,
			CDL_PERSON = 24,
			CDL_SAVED = 25,
			CDL_ANGLE_ABSOLUTE = 26,
			CDL_ANGLE_RELATIVE = 27,
			CDL_DEFAULT_LOOKUP = 28,
			CDL_SECOND_LOOKUP = 29,
			CDL_NO_FREE_BEHAVIOUR = 30,
			CDL_FREE_BEHAVIOR = 31,
			CDL_APPROACH_COVERAGE = 32
		};
		
		// default constructor
		CdlTagType() { 
			value = ENUM_VALUE_UNDEFINED;
		}
		
		// copy constructor for enum type
		CdlTagType(ENUM_CdlTagType e) {
			value = static_cast<int>(e);
		}
		
		// copy constructor for IDL type (which is typically int)
		CdlTagType(CommNavigationObjectsIDL::CdlTagType e) {
			value = e;
		}
		
		//const CommNavigationObjectsIDL::CdlTagType& get() const { return value; }
		
		// ENUM operator
		operator ENUM_CdlTagType() const {
			return static_cast<ENUM_CdlTagType>(value);
		}
		
		// compare operator
		bool operator == (const ENUM_CdlTagType t) const {
			return this->value == t;
		}
		
		std::string to_string(const bool &use_fqn=true) const {
			std::string result = "";
			if(use_fqn == true) {
				result = "CdlTagType::";
			}
			switch (value) {
				case CDL_SET_MODE_STRATEGY:
					result += "CDL_SET_MODE_STRATEGY";
					break;
				case CDL_SET_FREE_BEHAVIOUR:
					result += "CDL_SET_FREE_BEHAVIOUR";
					break;
				case CDL_SET_LOOKUP_TABLE:
					result += "CDL_SET_LOOKUP_TABLE";
					break;
				case CDL_SET_TRANS_VELOCITY:
					result += "CDL_SET_TRANS_VELOCITY";
					break;
				case CDL_SET_ROT_VELOCITY:
					result += "CDL_SET_ROT_VELOCITY";
					break;
				case CDL_SET_MODE_GOAL:
					result += "CDL_SET_MODE_GOAL";
					break;
				case CDL_SET_ID:
					result += "CDL_SET_ID";
					break;
				case CDL_SET_GOAL:
					result += "CDL_SET_GOAL";
					break;
				case CDL_SET_APPROACH_DIST:
					result += "CDL_SET_APPROACH_DIST";
					break;
				case CDL_SAVE_CURRENT_POS:
					result += "CDL_SAVE_CURRENT_POS";
					break;
				case CDL_SET_SAFETY_CLEARENCE:
					result += "CDL_SET_SAFETY_CLEARENCE";
					break;
				case CDL_NEUTRAL:
					result += "CDL_NEUTRAL";
					break;
				case CDL_REACTIVE:
					result += "CDL_REACTIVE";
					break;
				case CDL_JOYSTICK:
					result += "CDL_JOYSTICK";
					break;
				case CDL_TURN:
					result += "CDL_TURN";
					break;
				case CDL_APPROACH_FLAT_SURF:
					result += "CDL_APPROACH_FLAT_SURF";
					break;
				case CDL_APPROACH_HALT:
					result += "CDL_APPROACH_HALT";
					break;
				case CDL_APPROACH:
					result += "CDL_APPROACH";
					break;
				case CDL_ROTATE:
					result += "CDL_ROTATE";
					break;
				case CDL_FOLLOW:
					result += "CDL_FOLLOW";
					break;
				case CDL_BACKWARD:
					result += "CDL_BACKWARD";
					break;
				case CDL_ABSOLUTE:
					result += "CDL_ABSOLUTE";
					break;
				case CDL_PLANNER:
					result += "CDL_PLANNER";
					break;
				case CDL_PERSON:
					result += "CDL_PERSON";
					break;
				case CDL_SAVED:
					result += "CDL_SAVED";
					break;
				case CDL_ANGLE_ABSOLUTE:
					result += "CDL_ANGLE_ABSOLUTE";
					break;
				case CDL_ANGLE_RELATIVE:
					result += "CDL_ANGLE_RELATIVE";
					break;
				case CDL_DEFAULT_LOOKUP:
					result += "CDL_DEFAULT_LOOKUP";
					break;
				case CDL_SECOND_LOOKUP:
					result += "CDL_SECOND_LOOKUP";
					break;
				case CDL_NO_FREE_BEHAVIOUR:
					result += "CDL_NO_FREE_BEHAVIOUR";
					break;
				case CDL_FREE_BEHAVIOR:
					result += "CDL_FREE_BEHAVIOR";
					break;
				case CDL_APPROACH_COVERAGE:
					result += "CDL_APPROACH_COVERAGE";
					break;
				default:
					result += "ENUM_VALUE_UNDEFINED";
					break;
			};
			return result;
		}
		
		static CdlTagType from_string(const std::string &value) {
			std::string input = value;
			std::locale l;
			for(auto &c: input) {
				// convert all characters to lower case (so string comparison works regardless of small/capital letters)
				c = std::tolower(c,l);
			}
			std::string base_name = "cdltagtype::";
			if(input.compare(0, base_name.length(), base_name) == 0) {
				// remove basename from comparing the actual enumeration
				input.erase(0,base_name.length());
			}
			if(input == "cdl_set_mode_strategy"){
				return CdlTagType(CDL_SET_MODE_STRATEGY);
			}
			if(input == "cdl_set_free_behaviour"){
				return CdlTagType(CDL_SET_FREE_BEHAVIOUR);
			}
			if(input == "cdl_set_lookup_table"){
				return CdlTagType(CDL_SET_LOOKUP_TABLE);
			}
			if(input == "cdl_set_trans_velocity"){
				return CdlTagType(CDL_SET_TRANS_VELOCITY);
			}
			if(input == "cdl_set_rot_velocity"){
				return CdlTagType(CDL_SET_ROT_VELOCITY);
			}
			if(input == "cdl_set_mode_goal"){
				return CdlTagType(CDL_SET_MODE_GOAL);
			}
			if(input == "cdl_set_id"){
				return CdlTagType(CDL_SET_ID);
			}
			if(input == "cdl_set_goal"){
				return CdlTagType(CDL_SET_GOAL);
			}
			if(input == "cdl_set_approach_dist"){
				return CdlTagType(CDL_SET_APPROACH_DIST);
			}
			if(input == "cdl_save_current_pos"){
				return CdlTagType(CDL_SAVE_CURRENT_POS);
			}
			if(input == "cdl_set_safety_clearence"){
				return CdlTagType(CDL_SET_SAFETY_CLEARENCE);
			}
			if(input == "cdl_neutral"){
				return CdlTagType(CDL_NEUTRAL);
			}
			if(input == "cdl_reactive"){
				return CdlTagType(CDL_REACTIVE);
			}
			if(input == "cdl_joystick"){
				return CdlTagType(CDL_JOYSTICK);
			}
			if(input == "cdl_turn"){
				return CdlTagType(CDL_TURN);
			}
			if(input == "cdl_approach_flat_surf"){
				return CdlTagType(CDL_APPROACH_FLAT_SURF);
			}
			if(input == "cdl_approach_halt"){
				return CdlTagType(CDL_APPROACH_HALT);
			}
			if(input == "cdl_approach"){
				return CdlTagType(CDL_APPROACH);
			}
			if(input == "cdl_rotate"){
				return CdlTagType(CDL_ROTATE);
			}
			if(input == "cdl_follow"){
				return CdlTagType(CDL_FOLLOW);
			}
			if(input == "cdl_backward"){
				return CdlTagType(CDL_BACKWARD);
			}
			if(input == "cdl_absolute"){
				return CdlTagType(CDL_ABSOLUTE);
			}
			if(input == "cdl_planner"){
				return CdlTagType(CDL_PLANNER);
			}
			if(input == "cdl_person"){
				return CdlTagType(CDL_PERSON);
			}
			if(input == "cdl_saved"){
				return CdlTagType(CDL_SAVED);
			}
			if(input == "cdl_angle_absolute"){
				return CdlTagType(CDL_ANGLE_ABSOLUTE);
			}
			if(input == "cdl_angle_relative"){
				return CdlTagType(CDL_ANGLE_RELATIVE);
			}
			if(input == "cdl_default_lookup"){
				return CdlTagType(CDL_DEFAULT_LOOKUP);
			}
			if(input == "cdl_second_lookup"){
				return CdlTagType(CDL_SECOND_LOOKUP);
			}
			if(input == "cdl_no_free_behaviour"){
				return CdlTagType(CDL_NO_FREE_BEHAVIOUR);
			}
			if(input == "cdl_free_behavior"){
				return CdlTagType(CDL_FREE_BEHAVIOR);
			}
			if(input == "cdl_approach_coverage"){
				return CdlTagType(CDL_APPROACH_COVERAGE);
			}
			// default (if none of the preceding options match)
			return CdlTagType();
		}
		
		// helper method to easily implement output stream
		void to_ostream(std::ostream &os = std::cout) const {
			os << to_string();
		}
		
		// convert to xml stream
		void to_xml(std::ostream &os, const std::string &indent = "") const {
			os << indent << "<value>" << value << "</value>";
		}
		
		// restore from xml stream
		void from_xml(std::istream &is) {
			static const Smart::KnuthMorrisPratt kmp_value("<value>");
			if(kmp_value.search(is)) {
				is >> value;
			}
		}
	
	};
	
	inline std::ostream &operator<<(std::ostream &os, const CdlTagType &e)
	{
		e.to_ostream(os);
		return os;
	}
};

#endif
