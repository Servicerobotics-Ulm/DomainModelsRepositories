//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMNAVIGATIONOBJECTS_PLANNEREVENTTYPE_ENUM_H_
#define COMMNAVIGATIONOBJECTS_PLANNEREVENTTYPE_ENUM_H_

#include <CommNavigationObjects/enumPlannerEventTypeData.hh>

#include <string>
#include <iostream>
#include <locale>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

namespace CommNavigationObjects {
	
	class PlannerEventType {
	private:
		CommNavigationObjectsIDL::PlannerEventType value;
		
	public:
		enum ENUM_PlannerEventType {
			ENUM_VALUE_UNDEFINED = 0,
			PLANNER_NO_ERROR = 1,
			PLANNER_UNKNOWN_ERROR = 2,
			PLANNER_NO_GOAL_AVAILABLE = 3,
			PLANNER_GOAL_OK = 4,
			PLANNER_GOAL_NOT_MARKED = 5,
			PLANNER_START_OCCUPIED_OBSTACLE = 6,
			PLANNER_START_OCCUPIED_GOAL = 7,
			PLANNER_NO_PATH = 8,
			PLANNER_PATH_FOUND = 9,
			PLANNER_WRONG_MAPID = 10,
			PLANNER_INVALID_MAP = 11,
			PLANNER_UNKNOWN = 12
		};
		
		// default constructor
		PlannerEventType() { 
			value = ENUM_VALUE_UNDEFINED;
		}
		
		// copy constructor for enum type
		PlannerEventType(ENUM_PlannerEventType e) {
			value = static_cast<int>(e);
		}
		
		// copy constructor for IDL type (which is typically int)
		PlannerEventType(CommNavigationObjectsIDL::PlannerEventType e) {
			value = e;
		}
		
		//const CommNavigationObjectsIDL::PlannerEventType& get() const { return value; }
		
		// ENUM operator
		operator ENUM_PlannerEventType() const {
			return static_cast<ENUM_PlannerEventType>(value);
		}
		
		// compare operator
		bool operator == (const ENUM_PlannerEventType t) const {
			return this->value == t;
		}
		
		std::string to_string(const bool &use_fqn=true) const {
			std::string result = "";
			if(use_fqn == true) {
				result = "PlannerEventType::";
			}
			switch (value) {
				case PLANNER_NO_ERROR:
					result += "PLANNER_NO_ERROR";
					break;
				case PLANNER_UNKNOWN_ERROR:
					result += "PLANNER_UNKNOWN_ERROR";
					break;
				case PLANNER_NO_GOAL_AVAILABLE:
					result += "PLANNER_NO_GOAL_AVAILABLE";
					break;
				case PLANNER_GOAL_OK:
					result += "PLANNER_GOAL_OK";
					break;
				case PLANNER_GOAL_NOT_MARKED:
					result += "PLANNER_GOAL_NOT_MARKED";
					break;
				case PLANNER_START_OCCUPIED_OBSTACLE:
					result += "PLANNER_START_OCCUPIED_OBSTACLE";
					break;
				case PLANNER_START_OCCUPIED_GOAL:
					result += "PLANNER_START_OCCUPIED_GOAL";
					break;
				case PLANNER_NO_PATH:
					result += "PLANNER_NO_PATH";
					break;
				case PLANNER_PATH_FOUND:
					result += "PLANNER_PATH_FOUND";
					break;
				case PLANNER_WRONG_MAPID:
					result += "PLANNER_WRONG_MAPID";
					break;
				case PLANNER_INVALID_MAP:
					result += "PLANNER_INVALID_MAP";
					break;
				case PLANNER_UNKNOWN:
					result += "PLANNER_UNKNOWN";
					break;
				default:
					result += "ENUM_VALUE_UNDEFINED";
					break;
			};
			return result;
		}
		
		static PlannerEventType from_string(const std::string &value) {
			std::string input = value;
			std::locale l;
			for(auto &c: input) {
				// convert all characters to lower case (so string comparison works regardless of small/capital letters)
				c = std::tolower(c,l);
			}
			std::string base_name = "plannereventtype::";
			if(input.compare(0, base_name.length(), base_name) == 0) {
				// remove basename from comparing the actual enumeration
				input.erase(0,base_name.length());
			}
			if(input == "planner_no_error"){
				return PlannerEventType(PLANNER_NO_ERROR);
			}
			if(input == "planner_unknown_error"){
				return PlannerEventType(PLANNER_UNKNOWN_ERROR);
			}
			if(input == "planner_no_goal_available"){
				return PlannerEventType(PLANNER_NO_GOAL_AVAILABLE);
			}
			if(input == "planner_goal_ok"){
				return PlannerEventType(PLANNER_GOAL_OK);
			}
			if(input == "planner_goal_not_marked"){
				return PlannerEventType(PLANNER_GOAL_NOT_MARKED);
			}
			if(input == "planner_start_occupied_obstacle"){
				return PlannerEventType(PLANNER_START_OCCUPIED_OBSTACLE);
			}
			if(input == "planner_start_occupied_goal"){
				return PlannerEventType(PLANNER_START_OCCUPIED_GOAL);
			}
			if(input == "planner_no_path"){
				return PlannerEventType(PLANNER_NO_PATH);
			}
			if(input == "planner_path_found"){
				return PlannerEventType(PLANNER_PATH_FOUND);
			}
			if(input == "planner_wrong_mapid"){
				return PlannerEventType(PLANNER_WRONG_MAPID);
			}
			if(input == "planner_invalid_map"){
				return PlannerEventType(PLANNER_INVALID_MAP);
			}
			if(input == "planner_unknown"){
				return PlannerEventType(PLANNER_UNKNOWN);
			}
			// default (if none of the preceding options match)
			return PlannerEventType();
		}
		
		// helper method to easily implement output stream
		void to_ostream(std::ostream &os = std::cout) const {
			os << to_string();
		}
		
		// convert to xml stream
		void to_xml(std::ostream &os, const std::string &indent = "") const {
			os << indent << "<value>" << value << "</value>";
		}
		
		// restore from xml stream
		void from_xml(std::istream &is) {
			static const Smart::KnuthMorrisPratt kmp_value("<value>");
			if(kmp_value.search(is)) {
				is >> value;
			}
		}
	
	};
	
	inline std::ostream &operator<<(std::ostream &os, const PlannerEventType &e)
	{
		e.to_ostream(os);
		return os;
	}
};

#endif
