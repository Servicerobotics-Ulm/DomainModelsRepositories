#import CommBasicObjects.*;

CommObjectsRepository CommManipulatorObjects version 1.0 {
	
	CommObject CommMobileManipulatorState {
		manipulator_state: CommManipulatorState
		base_state: CommBaseState
	}
	
	CommObject CommInverseKinematicsRequest {
		tcp_pose: CommPose3d
		is_relative:Boolean = false
		motion_constraints: UInt8
	}
	CommObject CommInverseKinematicsResponse {
		joint_angles: Float[*]
		is_valid: Boolean = false
	} 
	
	Enumeration CartesianManipulationTargetReferenceFrame {
		MANIPULATOR = 0
		MOBILE_BASE = 1
	}
	
	CommObject CommCartesianManipulationTarget {
		tcp_pose: CommPose3d
		reference_frame : CartesianManipulationTargetReferenceFrame = MANIPULATOR
		is_relative:Boolean = false
		motion_type: BasicRobotMotionType
		reach_type: TargetVelocityTimeFlag
		velocity: Float // in [m/s]
		acceleration: Float // in [m/s^2]
		reach_time: Float = .0 // in [s]
		blending_radius: Float = .0 // in [m]
		motion_constraints: UInt8
	}
	
	CommObject CommJointManipulationTarget {
		joint_angles: Float[*]
		is_relative:Boolean = false
		motion_type: BasicRobotMotionType
		reach_type: TargetVelocityTimeFlag
		velocity: Float // in [rad/s]
		acceleration: Float // in [rad/s^2]
		reach_time: Float = .0 // in [s]
		blending_radius: Float = .0 // in [m]
	}
	
	CommObject CommManipulationTrajectory {
		joint_angles: CommJointManipulationTarget[*]
		tcp_poses: CommCartesianManipulationTarget[*]
		type: ManipulatorTrajectoryFlag
	}
	
	Enumeration ManipulatorTrajectoryFlag {
		JOINT_ANGLES
		POSE_TCP
	}
	
	Enumeration BasicRobotMotionType {
		LINEAR
		JOINT_SPACE
	}
	
	Enumeration TargetVelocityTimeFlag {
		VELOCITY
		TIME
	}
	
	CommObject CommManipulatorState {
		id: UInt32
		joint_angles: Double[*]
		pose_tcp: CommPose3d
		motion_constraints: UInt8
		/// manipulator mounting pose
		pose_manipulator: CommPose3d
		is_valid: Boolean= false
	}
	
	CommObject CommManipulatorEventParameter {
		event: ManipulatorEvent
	}
	
	CommObject CommManipulatorEventResult {
		event: ManipulatorEvent
	}
	
	CommObject CommManipulatorEventState {
		event: ManipulatorEvent
	}
	
	CommObject CommMobileManipulatorPrograms {
		names : String [*]
		isValid : Boolean = false
	}
	
	CommObject CommManipulatorRequestScan3d {
		begin_joint_angles: Double[*]
		end_joint_angles: Double[*]
		laser_begin_angle: Double
		laser_end_angle: Double
		number_of_steps: UInt16
	}
	
	CommObject CommManipulatorId {
		id: UInt32
		valid: Boolean= false
	}
	
	CommObject CommScanEventState {
		id: UInt32
		valid: Boolean= false
	}
	
	CommObject CommGripperEvent {
		gripper_event: GripperEvent
		pos: Float=0.0
	}
	
	CommObject CommGripperEventParameter {
		gripper_event: GripperEvent
	}
	
	CommObject CommGripperState {
		pos: Float[*]
		is_valid: Boolean= false
		
		graspState : GripperGraspState
		graspState_valid : Boolean = false
	}
	
	CommObject CommGripperTrajectory {
		joint_angles: CommJointValues[*]
	}
	
	Enumeration ManipulatorEvent {
		COLLISION
		NO_SOLUTION_FOUND
		VALUE_OUT_OF_RANGE
		GOAL_REACHED
		GOAL_NOT_REACHED
		INTERMEDIATE_GOAL_REACHED
		CANCELLED
		ERROR
		UNKNOWN
	}
	
	Enumeration GripperEvent {
		GRIPPER_GOAL_REACHED
		GRIPPER_GOAL_NOT_REACHED
		GRIPPER_GOAL_REACHED_EMPTY
		GRIPPER_UNKNOWN
	}
	
	Enumeration GripperGraspState {
		GRIPPER_EMTPY
		GRIPPER_FULL
	}
	
	
	// vacuum gripper types
	CommObject CommVacummGripperState {
		state : VacuumGraspState
		vacuumLevel : Double
	}
	
	CommObject CommVacuumGripperEventResult {
		state : VacuumGraspState	
	}
	
	CommObject CommVacuumGripperEventParameter {
		state : VacuumGraspState
	}
	
	CommObject CommVacuumGripperEventState {
		state : VacuumGraspState
	}
	
	Enumeration VacuumGraspState {
		VACUUM_REACHED
		VACUUM_NOT_REACHED
		VACUUM_OK
		VACUUM_LOST
		VACUUM_UNKNOWN
	}
	
	CommObject CommGrasp {
		id : String
		pose : CommBasicObjects.CommPose3d
		quality : Double
		width : Double
		valid : Boolean=false
	}
	
	//DEPRECATED
	CommObject CommManipulatorTrajectory {
		joint_angles: CommJointValues[*]
		pose_tcp: CommPose3d
		gripper_angles: CommGripperTrajectory
		flag: ManipulatorTrajectoryFlag
	}
	CommObject CommJointValues {
		values: Double[*]
		time: Float
	}
}
