//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommInverseKinematicsRequestJSON.hh"

#include "CommBasicObjectsJSON/CommPose3dJSON.hh"

namespace CommManipulatorObjectsIDL {

void to_json(const CommManipulatorObjectsIDL::CommInverseKinematicsRequest& obj, nlohmann::json& j)
{
	// tcp_pose: CommPose3d
	to_json(obj.tcp_pose, j["tcp_pose"]);
	// is_relative: Boolean
	j["is_relative"] = obj.is_relative;
	// motion_constraints: UInt8
	j["motion_constraints"] = obj.motion_constraints;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommManipulatorObjectsIDL::CommInverseKinematicsRequest& obj)
{
	// tcp_pose: CommPose3d
	if(j.contains("tcp_pose") && j["tcp_pose"].is_object()) {
		//from_json(j["tcp_pose"], obj.tcp_pose);
		obj.tcp_pose = j["tcp_pose"].get<CommBasicObjectsIDL::CommPose3d>();
	}
	// is_relative: Boolean
	if(j.contains("is_relative") && j["is_relative"].is_boolean()) {
		obj.is_relative = j["is_relative"].get<bool>();
	}
	// motion_constraints: UInt8
	if(j.contains("motion_constraints") && j["motion_constraints"].is_number_unsigned()) {
		obj.motion_constraints = j["motion_constraints"].get<unsigned char>();
	}
}

} // end namespace CommManipulatorObjectsIDL
