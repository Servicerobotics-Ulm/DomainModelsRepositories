//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommGripperStateJSON.hh"


namespace CommManipulatorObjectsIDL {

void to_json(const CommManipulatorObjectsIDL::CommGripperState& obj, nlohmann::json& j)
{
	// pos: Float[]
	j["pos"] = obj.pos;
	// is_valid: Boolean
	j["is_valid"] = obj.is_valid;
	// graspState: GripperGraspState
	j["graspState"] = obj.graspState;
	// graspState_valid: Boolean
	j["graspState_valid"] = obj.graspState_valid;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommManipulatorObjectsIDL::CommGripperState& obj)
{
	// pos: Float[]
	if(j.contains("pos") && j["pos"].is_array()) {
		obj.pos = j["pos"].get<std::vector<float>>();
	}
	// is_valid: Boolean
	if(j.contains("is_valid") && j["is_valid"].is_boolean()) {
		obj.is_valid = j["is_valid"].get<bool>();
	}
	// graspState: GripperGraspState
	if(j.contains("graspState") && j["graspState"].is_number_integer()) {
		obj.graspState = j["graspState"].get<int>();
	}
	// graspState_valid: Boolean
	if(j.contains("graspState_valid") && j["graspState_valid"].is_boolean()) {
		obj.graspState_valid = j["graspState_valid"].get<bool>();
	}
}

} // end namespace CommManipulatorObjectsIDL
