//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommJointManipulationTargetJSON.hh"

#include <CommManipulatorObjects/enumBasicRobotMotionType.hh>
#include <CommManipulatorObjects/enumTargetVelocityTimeFlag.hh>

namespace CommManipulatorObjectsIDL {

void to_json(const CommManipulatorObjectsIDL::CommJointManipulationTarget& obj, nlohmann::json& j)
{
	// joint_angles: Float[]
	j["joint_angles"] = obj.joint_angles;
	// is_relative: Boolean
	j["is_relative"] = obj.is_relative;
	// motion_type: BasicRobotMotionType
	j["motion_type"] = CommManipulatorObjects::BasicRobotMotionType(obj.motion_type).to_string(false);
	// reach_type: TargetVelocityTimeFlag
	j["reach_type"] = CommManipulatorObjects::TargetVelocityTimeFlag(obj.reach_type).to_string(false);
	// velocity: Float
	j["velocity"] = obj.velocity;
	// acceleration: Float
	j["acceleration"] = obj.acceleration;
	// reach_time: Float
	j["reach_time"] = obj.reach_time;
	// blending_radius: Float
	j["blending_radius"] = obj.blending_radius;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommManipulatorObjectsIDL::CommJointManipulationTarget& obj)
{
	// joint_angles: Float[]
	if(j.contains("joint_angles") && j["joint_angles"].is_array()) {
		obj.joint_angles = j["joint_angles"].get<std::vector<float>>();
	}
	// is_relative: Boolean
	if(j.contains("is_relative") && j["is_relative"].is_boolean()) {
		obj.is_relative = j["is_relative"].get<bool>();
	}
	// motion_type: BasicRobotMotionType
	if(j.contains("motion_type") && j["motion_type"].is_string()) {
		obj.motion_type = CommManipulatorObjects::BasicRobotMotionType::from_string(j["motion_type"].get<std::string>());
	}
	// reach_type: TargetVelocityTimeFlag
	if(j.contains("reach_type") && j["reach_type"].is_string()) {
		obj.reach_type = CommManipulatorObjects::TargetVelocityTimeFlag::from_string(j["reach_type"].get<std::string>());
	}
	// velocity: Float
	if(j.contains("velocity") && j["velocity"].is_number_float()) {
		obj.velocity = j["velocity"].get<float>();
	}
	// acceleration: Float
	if(j.contains("acceleration") && j["acceleration"].is_number_float()) {
		obj.acceleration = j["acceleration"].get<float>();
	}
	// reach_time: Float
	if(j.contains("reach_time") && j["reach_time"].is_number_float()) {
		obj.reach_time = j["reach_time"].get<float>();
	}
	// blending_radius: Float
	if(j.contains("blending_radius") && j["blending_radius"].is_number_float()) {
		obj.blending_radius = j["blending_radius"].get<float>();
	}
}

} // end namespace CommManipulatorObjectsIDL
