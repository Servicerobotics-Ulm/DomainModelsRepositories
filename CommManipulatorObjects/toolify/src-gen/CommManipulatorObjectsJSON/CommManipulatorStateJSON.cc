//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommManipulatorStateJSON.hh"

#include "CommBasicObjectsJSON/CommPose3dJSON.hh"
#include "CommBasicObjectsJSON/CommPose3dJSON.hh"

namespace CommManipulatorObjectsIDL {

void to_json(const CommManipulatorObjectsIDL::CommManipulatorState& obj, nlohmann::json& j)
{
	// id: UInt32
	j["id"] = obj.id;
	// joint_angles: Double[]
	j["joint_angles"] = obj.joint_angles;
	// pose_tcp: CommPose3d
	to_json(obj.pose_tcp, j["pose_tcp"]);
	// pose_manipulator: CommPose3d
	to_json(obj.pose_manipulator, j["pose_manipulator"]);
	// is_valid: Boolean
	j["is_valid"] = obj.is_valid;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommManipulatorObjectsIDL::CommManipulatorState& obj)
{
	// id: UInt32
	if(j.contains("id") && j["id"].is_number_unsigned()) {
		obj.id = j["id"].get<unsigned int>();
	}
	// joint_angles: Double[]
	if(j.contains("joint_angles") && j["joint_angles"].is_array()) {
		obj.joint_angles = j["joint_angles"].get<std::vector<double>>();
	}
	// pose_tcp: CommPose3d
	if(j.contains("pose_tcp") && j["pose_tcp"].is_object()) {
		//from_json(j["pose_tcp"], obj.pose_tcp);
		obj.pose_tcp = j["pose_tcp"].get<CommBasicObjectsIDL::CommPose3d>();
	}
	// pose_manipulator: CommPose3d
	if(j.contains("pose_manipulator") && j["pose_manipulator"].is_object()) {
		//from_json(j["pose_manipulator"], obj.pose_manipulator);
		obj.pose_manipulator = j["pose_manipulator"].get<CommBasicObjectsIDL::CommPose3d>();
	}
	// is_valid: Boolean
	if(j.contains("is_valid") && j["is_valid"].is_boolean()) {
		obj.is_valid = j["is_valid"].get<bool>();
	}
}

} // end namespace CommManipulatorObjectsIDL
