//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATOROBJECTS_COMMMOBILEMANIPULATORPROGRAMS_CORE_H_
#define COMMMANIPULATOROBJECTS_COMMMOBILEMANIPULATORPROGRAMS_CORE_H_

#include "CommManipulatorObjects/CommMobileManipulatorProgramsData.hh"

#include <iostream>
#include <string>
#include <list>
#include <algorithm> // for using std::transform

namespace CommManipulatorObjects {
	
class CommMobileManipulatorProgramsCore {
protected:
	// data structure
	CommManipulatorObjectsIDL::CommMobileManipulatorPrograms idl_CommMobileManipulatorPrograms;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommManipulatorObjectsIDL::CommMobileManipulatorPrograms DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommMobileManipulatorProgramsCore();
	CommMobileManipulatorProgramsCore(const DATATYPE &data);
	// default destructor
	virtual ~CommMobileManipulatorProgramsCore();
	
	const DATATYPE& get() const { return idl_CommMobileManipulatorPrograms; }
	operator const DATATYPE&() const { return idl_CommMobileManipulatorPrograms; }
	DATATYPE& set() { return idl_CommMobileManipulatorPrograms; }

	static inline std::string identifier(void) { return "CommManipulatorObjects::CommMobileManipulatorPrograms"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Names
	/**
	 * Getter methods for idl_CommMobileManipulatorPrograms.names of type vector<std::string>
	 */
	inline std::vector<std::string> getNamesCopy() const {
		return std::vector<std::string>(idl_CommMobileManipulatorPrograms.names.begin(), idl_CommMobileManipulatorPrograms.names.end());
	}
	inline std::string getNamesElemAtPos(const size_t &pos) const { return idl_CommMobileManipulatorPrograms.names[pos].c_str(); }
	inline size_t getNamesSize() const { return idl_CommMobileManipulatorPrograms.names.size(); }
	inline bool isNamesEmpty() const { return idl_CommMobileManipulatorPrograms.names.empty(); }
	/**
	 * Setter methods for idl_CommMobileManipulatorPrograms.names of type vector<std::string>
	 */
	inline CommMobileManipulatorProgramsCore& setNames(const std::vector<std::string> &names) { idl_CommMobileManipulatorPrograms.names = names; return *this; }
	inline bool setNamesElemAtPos(const size_t &pos, const std::string &elem) {
		if(pos < idl_CommMobileManipulatorPrograms.names.size()) {
			idl_CommMobileManipulatorPrograms.names[pos] = elem.c_str();
			return true;
		}
		return false;
	}
	inline bool insertNamesVectorAtPos(const size_t &pos, const std::vector<std::string> &data) {
		if(pos < idl_CommMobileManipulatorPrograms.names.size()) {
			idl_CommMobileManipulatorPrograms.names.insert(idl_CommMobileManipulatorPrograms.names.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeNames(const size_t &size) { idl_CommMobileManipulatorPrograms.names.resize(size); }
	inline bool eraseNamesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommMobileManipulatorPrograms.names.size() ) {
			idl_CommMobileManipulatorPrograms.names.erase(idl_CommMobileManipulatorPrograms.names.begin()+pos, idl_CommMobileManipulatorPrograms.names.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearNames() { idl_CommMobileManipulatorPrograms.names.clear(); }
	
	// getter and setter for element IsValid
	inline bool getIsValid() const { return idl_CommMobileManipulatorPrograms.isValid; }
	inline CommMobileManipulatorProgramsCore& setIsValid(const bool &isValid) { idl_CommMobileManipulatorPrograms.isValid = isValid; return *this; }
};

} /* namespace CommManipulatorObjects */
#endif /* COMMMANIPULATOROBJECTS_COMMMOBILEMANIPULATORPROGRAMS_CORE_H_ */
