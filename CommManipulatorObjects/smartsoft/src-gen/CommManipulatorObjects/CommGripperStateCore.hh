//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATOROBJECTS_COMMGRIPPERSTATE_CORE_H_
#define COMMMANIPULATOROBJECTS_COMMGRIPPERSTATE_CORE_H_

#include "CommManipulatorObjects/CommGripperStateData.hh"
#include "CommManipulatorObjects/enumGripperGraspState.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommManipulatorObjects {
	
class CommGripperStateCore {
protected:
	// data structure
	CommManipulatorObjectsIDL::CommGripperState idl_CommGripperState;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommManipulatorObjectsIDL::CommGripperState DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommGripperStateCore();
	CommGripperStateCore(const DATATYPE &data);
	// default destructor
	virtual ~CommGripperStateCore();
	
	const DATATYPE& get() const { return idl_CommGripperState; }
	operator const DATATYPE&() const { return idl_CommGripperState; }
	DATATYPE& set() { return idl_CommGripperState; }

	static inline std::string identifier(void) { return "CommManipulatorObjects::CommGripperState"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Pos
	/**
	 * Getter methods for idl_CommGripperState.pos of type vector<float>
	 */
	inline std::vector<float>& getPosRef() { return idl_CommGripperState.pos; }
	inline std::vector<float> getPosCopy() const {
		return std::vector<float>(idl_CommGripperState.pos.begin(), idl_CommGripperState.pos.end());
	}
	inline float getPosElemAtPos(const size_t &pos) const { return idl_CommGripperState.pos[pos]; }
	inline size_t getPosSize() const { return idl_CommGripperState.pos.size(); }
	inline bool isPosEmpty() const { return idl_CommGripperState.pos.empty(); }
	/**
	 * Setter methods for idl_CommGripperState.pos of type vector<float>
	 */
	inline CommGripperStateCore& setPos(const std::vector<float> &pos) { idl_CommGripperState.pos = pos; return *this; }
	inline bool setPosElemAtPos(const size_t &pos, const float &elem) {
		if(pos < idl_CommGripperState.pos.size()) {
			idl_CommGripperState.pos[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertPosVectorAtPos(const size_t &pos, const std::vector<float> &data) {
		if(pos <= idl_CommGripperState.pos.size()) {
			idl_CommGripperState.pos.insert(idl_CommGripperState.pos.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizePos(const size_t &size) { idl_CommGripperState.pos.resize(size); }
	inline bool erasePosElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommGripperState.pos.size() ) {
			idl_CommGripperState.pos.erase(idl_CommGripperState.pos.begin()+pos, idl_CommGripperState.pos.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearPos() { idl_CommGripperState.pos.clear(); }
	
	// getter and setter for element Is_valid
	inline bool getIs_valid() const { return idl_CommGripperState.is_valid; }
	inline CommGripperStateCore& setIs_valid(const bool &is_valid) { idl_CommGripperState.is_valid = is_valid; return *this; }
	
	// getter and setter for element GraspState
	inline CommManipulatorObjects::GripperGraspState getGraspState() const { return CommManipulatorObjects::GripperGraspState(idl_CommGripperState.graspState); }
	inline CommGripperStateCore& setGraspState(const CommManipulatorObjects::GripperGraspState &graspState) { idl_CommGripperState.graspState = graspState; return *this; }
	
	// getter and setter for element GraspState_valid
	inline bool getGraspState_valid() const { return idl_CommGripperState.graspState_valid; }
	inline CommGripperStateCore& setGraspState_valid(const bool &graspState_valid) { idl_CommGripperState.graspState_valid = graspState_valid; return *this; }
};

} /* namespace CommManipulatorObjects */
#endif /* COMMMANIPULATOROBJECTS_COMMGRIPPERSTATE_CORE_H_ */
