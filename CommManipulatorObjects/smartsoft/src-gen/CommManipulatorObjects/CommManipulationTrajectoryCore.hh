//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATOROBJECTS_COMMMANIPULATIONTRAJECTORY_CORE_H_
#define COMMMANIPULATOROBJECTS_COMMMANIPULATIONTRAJECTORY_CORE_H_

#include "CommManipulatorObjects/CommManipulationTrajectoryData.hh"
#include "CommManipulatorObjects/CommJointManipulationTarget.hh"
#include "CommManipulatorObjects/CommCartesianManipulationTarget.hh"
#include "CommManipulatorObjects/enumManipulatorTrajectoryFlag.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommManipulatorObjects {
	
class CommManipulationTrajectoryCore {
protected:
	// data structure
	CommManipulatorObjectsIDL::CommManipulationTrajectory idl_CommManipulationTrajectory;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommManipulatorObjectsIDL::CommManipulationTrajectory DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommManipulationTrajectoryCore();
	CommManipulationTrajectoryCore(const DATATYPE &data);
	// default destructor
	virtual ~CommManipulationTrajectoryCore();
	
	const DATATYPE& get() const { return idl_CommManipulationTrajectory; }
	operator const DATATYPE&() const { return idl_CommManipulationTrajectory; }
	DATATYPE& set() { return idl_CommManipulationTrajectory; }

	static inline std::string identifier(void) { return "CommManipulatorObjects::CommManipulationTrajectory"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Joint_angles
	/**
	 * Getter methods for element idl_CommManipulationTrajectory.joint_angles of type vector<CommManipulatorObjects::CommJointManipulationTarget>
	 */
	inline std::vector<CommManipulatorObjects::CommJointManipulationTarget> getJoint_anglesCopy() const { 
		return std::vector<CommManipulatorObjects::CommJointManipulationTarget>(idl_CommManipulationTrajectory.joint_angles.begin(), idl_CommManipulationTrajectory.joint_angles.end());
	}
	inline CommManipulatorObjects::CommJointManipulationTarget getJoint_anglesElemAtPos(const size_t &pos) const {
		return CommManipulatorObjects::CommJointManipulationTarget(idl_CommManipulationTrajectory.joint_angles[pos]);
	}
	inline size_t getJoint_anglesSize() const { return idl_CommManipulationTrajectory.joint_angles.size(); }
	inline bool isJoint_anglesEmpty() const { return idl_CommManipulationTrajectory.joint_angles.empty(); }
	/**
	 * Setter methods for idl_CommManipulationTrajectory.joint_angles of type vector<CommManipulatorObjects::CommJointManipulationTarget>
	 */
	inline CommManipulationTrajectoryCore& setJoint_angles(const std::vector<CommManipulatorObjects::CommJointManipulationTarget> &joint_angles) { 
		idl_CommManipulationTrajectory.joint_angles.assign(joint_angles.begin(), joint_angles.end());
		return *this;
	}
	inline bool setJoint_anglesElemAtPos(const size_t &pos, const CommManipulatorObjects::CommJointManipulationTarget &elem) {
		if(pos < idl_CommManipulationTrajectory.joint_angles.size()) {
			idl_CommManipulationTrajectory.joint_angles[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertJoint_anglesVectorAtPos(const size_t &pos, const std::vector<CommManipulatorObjects::CommJointManipulationTarget> &data) {
		if(pos < idl_CommManipulationTrajectory.joint_angles.size()) {
			idl_CommManipulationTrajectory.joint_angles.insert(idl_CommManipulationTrajectory.joint_angles.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeJoint_angles(const size_t &size) { idl_CommManipulationTrajectory.joint_angles.resize(size); }
	inline bool eraseJoint_anglesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommManipulationTrajectory.joint_angles.size() ) {
			idl_CommManipulationTrajectory.joint_angles.erase(idl_CommManipulationTrajectory.joint_angles.begin()+pos, idl_CommManipulationTrajectory.joint_angles.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearJoint_angles() { idl_CommManipulationTrajectory.joint_angles.clear(); }
	
	// getter and setter for element Tcp_poses
	/**
	 * Getter methods for element idl_CommManipulationTrajectory.tcp_poses of type vector<CommManipulatorObjects::CommCartesianManipulationTarget>
	 */
	inline std::vector<CommManipulatorObjects::CommCartesianManipulationTarget> getTcp_posesCopy() const { 
		return std::vector<CommManipulatorObjects::CommCartesianManipulationTarget>(idl_CommManipulationTrajectory.tcp_poses.begin(), idl_CommManipulationTrajectory.tcp_poses.end());
	}
	inline CommManipulatorObjects::CommCartesianManipulationTarget getTcp_posesElemAtPos(const size_t &pos) const {
		return CommManipulatorObjects::CommCartesianManipulationTarget(idl_CommManipulationTrajectory.tcp_poses[pos]);
	}
	inline size_t getTcp_posesSize() const { return idl_CommManipulationTrajectory.tcp_poses.size(); }
	inline bool isTcp_posesEmpty() const { return idl_CommManipulationTrajectory.tcp_poses.empty(); }
	/**
	 * Setter methods for idl_CommManipulationTrajectory.tcp_poses of type vector<CommManipulatorObjects::CommCartesianManipulationTarget>
	 */
	inline CommManipulationTrajectoryCore& setTcp_poses(const std::vector<CommManipulatorObjects::CommCartesianManipulationTarget> &tcp_poses) { 
		idl_CommManipulationTrajectory.tcp_poses.assign(tcp_poses.begin(), tcp_poses.end());
		return *this;
	}
	inline bool setTcp_posesElemAtPos(const size_t &pos, const CommManipulatorObjects::CommCartesianManipulationTarget &elem) {
		if(pos < idl_CommManipulationTrajectory.tcp_poses.size()) {
			idl_CommManipulationTrajectory.tcp_poses[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertTcp_posesVectorAtPos(const size_t &pos, const std::vector<CommManipulatorObjects::CommCartesianManipulationTarget> &data) {
		if(pos < idl_CommManipulationTrajectory.tcp_poses.size()) {
			idl_CommManipulationTrajectory.tcp_poses.insert(idl_CommManipulationTrajectory.tcp_poses.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeTcp_poses(const size_t &size) { idl_CommManipulationTrajectory.tcp_poses.resize(size); }
	inline bool eraseTcp_posesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommManipulationTrajectory.tcp_poses.size() ) {
			idl_CommManipulationTrajectory.tcp_poses.erase(idl_CommManipulationTrajectory.tcp_poses.begin()+pos, idl_CommManipulationTrajectory.tcp_poses.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearTcp_poses() { idl_CommManipulationTrajectory.tcp_poses.clear(); }
	
	// getter and setter for element Type
	inline CommManipulatorObjects::ManipulatorTrajectoryFlag getType() const { return CommManipulatorObjects::ManipulatorTrajectoryFlag(idl_CommManipulationTrajectory.type); }
	inline CommManipulationTrajectoryCore& setType(const CommManipulatorObjects::ManipulatorTrajectoryFlag &type) { idl_CommManipulationTrajectory.type = type; return *this; }
};

} /* namespace CommManipulatorObjects */
#endif /* COMMMANIPULATOROBJECTS_COMMMANIPULATIONTRAJECTORY_CORE_H_ */
