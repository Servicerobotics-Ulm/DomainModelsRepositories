//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATOROBJECTS_COMMCARTESIANMANIPULATIONTARGET_CORE_H_
#define COMMMANIPULATOROBJECTS_COMMCARTESIANMANIPULATIONTARGET_CORE_H_

#include "CommManipulatorObjects/CommCartesianManipulationTargetData.hh"
#include "CommBasicObjects/CommPose3d.hh"
#include "CommManipulatorObjects/enumCartesianManipulationTargetReferenceFrame.hh"
#include "CommManipulatorObjects/enumBasicRobotMotionType.hh"
#include "CommManipulatorObjects/enumTargetVelocityTimeFlag.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommManipulatorObjects {
	
class CommCartesianManipulationTargetCore {
protected:
	// data structure
	CommManipulatorObjectsIDL::CommCartesianManipulationTarget idl_CommCartesianManipulationTarget;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommManipulatorObjectsIDL::CommCartesianManipulationTarget DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommCartesianManipulationTargetCore();
	CommCartesianManipulationTargetCore(const DATATYPE &data);
	// default destructor
	virtual ~CommCartesianManipulationTargetCore();
	
	const DATATYPE& get() const { return idl_CommCartesianManipulationTarget; }
	operator const DATATYPE&() const { return idl_CommCartesianManipulationTarget; }
	DATATYPE& set() { return idl_CommCartesianManipulationTarget; }

	static inline std::string identifier(void) { return "CommManipulatorObjects::CommCartesianManipulationTarget"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Tcp_pose
	inline CommBasicObjects::CommPose3d getTcp_pose() const { return CommBasicObjects::CommPose3d(idl_CommCartesianManipulationTarget.tcp_pose); }
	inline CommCartesianManipulationTargetCore& setTcp_pose(const CommBasicObjects::CommPose3d &tcp_pose) { idl_CommCartesianManipulationTarget.tcp_pose = tcp_pose; return *this; }
	
	// getter and setter for element Reference_frame
	inline CommManipulatorObjects::CartesianManipulationTargetReferenceFrame getReference_frame() const { return CommManipulatorObjects::CartesianManipulationTargetReferenceFrame(idl_CommCartesianManipulationTarget.reference_frame); }
	inline CommCartesianManipulationTargetCore& setReference_frame(const CommManipulatorObjects::CartesianManipulationTargetReferenceFrame &reference_frame) { idl_CommCartesianManipulationTarget.reference_frame = reference_frame; return *this; }
	
	// getter and setter for element Is_relative
	inline bool getIs_relative() const { return idl_CommCartesianManipulationTarget.is_relative; }
	inline CommCartesianManipulationTargetCore& setIs_relative(const bool &is_relative) { idl_CommCartesianManipulationTarget.is_relative = is_relative; return *this; }
	
	// getter and setter for element Motion_type
	inline CommManipulatorObjects::BasicRobotMotionType getMotion_type() const { return CommManipulatorObjects::BasicRobotMotionType(idl_CommCartesianManipulationTarget.motion_type); }
	inline CommCartesianManipulationTargetCore& setMotion_type(const CommManipulatorObjects::BasicRobotMotionType &motion_type) { idl_CommCartesianManipulationTarget.motion_type = motion_type; return *this; }
	
	// getter and setter for element Reach_type
	inline CommManipulatorObjects::TargetVelocityTimeFlag getReach_type() const { return CommManipulatorObjects::TargetVelocityTimeFlag(idl_CommCartesianManipulationTarget.reach_type); }
	inline CommCartesianManipulationTargetCore& setReach_type(const CommManipulatorObjects::TargetVelocityTimeFlag &reach_type) { idl_CommCartesianManipulationTarget.reach_type = reach_type; return *this; }
	
	// getter and setter for element Velocity
	inline float getVelocity() const { return idl_CommCartesianManipulationTarget.velocity; }
	inline CommCartesianManipulationTargetCore& setVelocity(const float &velocity) { idl_CommCartesianManipulationTarget.velocity = velocity; return *this; }
	
	// getter and setter for element Acceleration
	inline float getAcceleration() const { return idl_CommCartesianManipulationTarget.acceleration; }
	inline CommCartesianManipulationTargetCore& setAcceleration(const float &acceleration) { idl_CommCartesianManipulationTarget.acceleration = acceleration; return *this; }
	
	// getter and setter for element Reach_time
	inline float getReach_time() const { return idl_CommCartesianManipulationTarget.reach_time; }
	inline CommCartesianManipulationTargetCore& setReach_time(const float &reach_time) { idl_CommCartesianManipulationTarget.reach_time = reach_time; return *this; }
	
	// getter and setter for element Blending_radius
	inline float getBlending_radius() const { return idl_CommCartesianManipulationTarget.blending_radius; }
	inline CommCartesianManipulationTargetCore& setBlending_radius(const float &blending_radius) { idl_CommCartesianManipulationTarget.blending_radius = blending_radius; return *this; }
	
	// getter and setter for element Motion_constraints
	inline unsigned char getMotion_constraints() const { return idl_CommCartesianManipulationTarget.motion_constraints; }
	inline CommCartesianManipulationTargetCore& setMotion_constraints(const unsigned char &motion_constraints) { idl_CommCartesianManipulationTarget.motion_constraints = motion_constraints; return *this; }
};

} /* namespace CommManipulatorObjects */
#endif /* COMMMANIPULATOROBJECTS_COMMCARTESIANMANIPULATIONTARGET_CORE_H_ */
