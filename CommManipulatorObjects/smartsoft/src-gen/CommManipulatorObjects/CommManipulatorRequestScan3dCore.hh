//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATOROBJECTS_COMMMANIPULATORREQUESTSCAN3D_CORE_H_
#define COMMMANIPULATOROBJECTS_COMMMANIPULATORREQUESTSCAN3D_CORE_H_

#include "CommManipulatorObjects/CommManipulatorRequestScan3dData.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommManipulatorObjects {
	
class CommManipulatorRequestScan3dCore {
protected:
	// data structure
	CommManipulatorObjectsIDL::CommManipulatorRequestScan3d idl_CommManipulatorRequestScan3d;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommManipulatorObjectsIDL::CommManipulatorRequestScan3d DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommManipulatorRequestScan3dCore();
	CommManipulatorRequestScan3dCore(const DATATYPE &data);
	// default destructor
	virtual ~CommManipulatorRequestScan3dCore();
	
	const DATATYPE& get() const { return idl_CommManipulatorRequestScan3d; }
	operator const DATATYPE&() const { return idl_CommManipulatorRequestScan3d; }
	DATATYPE& set() { return idl_CommManipulatorRequestScan3d; }

	static inline std::string identifier(void) { return "CommManipulatorObjects::CommManipulatorRequestScan3d"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Begin_joint_angles
	/**
	 * Getter methods for idl_CommManipulatorRequestScan3d.begin_joint_angles of type vector<double>
	 */
	inline std::vector<double>& getBegin_joint_anglesRef() { return idl_CommManipulatorRequestScan3d.begin_joint_angles; }
	inline std::vector<double> getBegin_joint_anglesCopy() const {
		return std::vector<double>(idl_CommManipulatorRequestScan3d.begin_joint_angles.begin(), idl_CommManipulatorRequestScan3d.begin_joint_angles.end());
	}
	inline double getBegin_joint_anglesElemAtPos(const size_t &pos) const { return idl_CommManipulatorRequestScan3d.begin_joint_angles[pos]; }
	inline size_t getBegin_joint_anglesSize() const { return idl_CommManipulatorRequestScan3d.begin_joint_angles.size(); }
	inline bool isBegin_joint_anglesEmpty() const { return idl_CommManipulatorRequestScan3d.begin_joint_angles.empty(); }
	/**
	 * Setter methods for idl_CommManipulatorRequestScan3d.begin_joint_angles of type vector<double>
	 */
	inline CommManipulatorRequestScan3dCore& setBegin_joint_angles(const std::vector<double> &begin_joint_angles) { idl_CommManipulatorRequestScan3d.begin_joint_angles = begin_joint_angles; return *this; }
	inline bool setBegin_joint_anglesElemAtPos(const size_t &pos, const double &elem) {
		if(pos < idl_CommManipulatorRequestScan3d.begin_joint_angles.size()) {
			idl_CommManipulatorRequestScan3d.begin_joint_angles[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertBegin_joint_anglesVectorAtPos(const size_t &pos, const std::vector<double> &data) {
		if(pos <= idl_CommManipulatorRequestScan3d.begin_joint_angles.size()) {
			idl_CommManipulatorRequestScan3d.begin_joint_angles.insert(idl_CommManipulatorRequestScan3d.begin_joint_angles.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeBegin_joint_angles(const size_t &size) { idl_CommManipulatorRequestScan3d.begin_joint_angles.resize(size); }
	inline bool eraseBegin_joint_anglesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommManipulatorRequestScan3d.begin_joint_angles.size() ) {
			idl_CommManipulatorRequestScan3d.begin_joint_angles.erase(idl_CommManipulatorRequestScan3d.begin_joint_angles.begin()+pos, idl_CommManipulatorRequestScan3d.begin_joint_angles.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearBegin_joint_angles() { idl_CommManipulatorRequestScan3d.begin_joint_angles.clear(); }
	
	// getter and setter for element End_joint_angles
	/**
	 * Getter methods for idl_CommManipulatorRequestScan3d.end_joint_angles of type vector<double>
	 */
	inline std::vector<double>& getEnd_joint_anglesRef() { return idl_CommManipulatorRequestScan3d.end_joint_angles; }
	inline std::vector<double> getEnd_joint_anglesCopy() const {
		return std::vector<double>(idl_CommManipulatorRequestScan3d.end_joint_angles.begin(), idl_CommManipulatorRequestScan3d.end_joint_angles.end());
	}
	inline double getEnd_joint_anglesElemAtPos(const size_t &pos) const { return idl_CommManipulatorRequestScan3d.end_joint_angles[pos]; }
	inline size_t getEnd_joint_anglesSize() const { return idl_CommManipulatorRequestScan3d.end_joint_angles.size(); }
	inline bool isEnd_joint_anglesEmpty() const { return idl_CommManipulatorRequestScan3d.end_joint_angles.empty(); }
	/**
	 * Setter methods for idl_CommManipulatorRequestScan3d.end_joint_angles of type vector<double>
	 */
	inline CommManipulatorRequestScan3dCore& setEnd_joint_angles(const std::vector<double> &end_joint_angles) { idl_CommManipulatorRequestScan3d.end_joint_angles = end_joint_angles; return *this; }
	inline bool setEnd_joint_anglesElemAtPos(const size_t &pos, const double &elem) {
		if(pos < idl_CommManipulatorRequestScan3d.end_joint_angles.size()) {
			idl_CommManipulatorRequestScan3d.end_joint_angles[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertEnd_joint_anglesVectorAtPos(const size_t &pos, const std::vector<double> &data) {
		if(pos <= idl_CommManipulatorRequestScan3d.end_joint_angles.size()) {
			idl_CommManipulatorRequestScan3d.end_joint_angles.insert(idl_CommManipulatorRequestScan3d.end_joint_angles.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeEnd_joint_angles(const size_t &size) { idl_CommManipulatorRequestScan3d.end_joint_angles.resize(size); }
	inline bool eraseEnd_joint_anglesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommManipulatorRequestScan3d.end_joint_angles.size() ) {
			idl_CommManipulatorRequestScan3d.end_joint_angles.erase(idl_CommManipulatorRequestScan3d.end_joint_angles.begin()+pos, idl_CommManipulatorRequestScan3d.end_joint_angles.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearEnd_joint_angles() { idl_CommManipulatorRequestScan3d.end_joint_angles.clear(); }
	
	// getter and setter for element Laser_begin_angle
	inline double getLaser_begin_angle() const { return idl_CommManipulatorRequestScan3d.laser_begin_angle; }
	inline CommManipulatorRequestScan3dCore& setLaser_begin_angle(const double &laser_begin_angle) { idl_CommManipulatorRequestScan3d.laser_begin_angle = laser_begin_angle; return *this; }
	
	// getter and setter for element Laser_end_angle
	inline double getLaser_end_angle() const { return idl_CommManipulatorRequestScan3d.laser_end_angle; }
	inline CommManipulatorRequestScan3dCore& setLaser_end_angle(const double &laser_end_angle) { idl_CommManipulatorRequestScan3d.laser_end_angle = laser_end_angle; return *this; }
	
	// getter and setter for element Number_of_steps
	inline unsigned short getNumber_of_steps() const { return idl_CommManipulatorRequestScan3d.number_of_steps; }
	inline CommManipulatorRequestScan3dCore& setNumber_of_steps(const unsigned short &number_of_steps) { idl_CommManipulatorRequestScan3d.number_of_steps = number_of_steps; return *this; }
};

} /* namespace CommManipulatorObjects */
#endif /* COMMMANIPULATOROBJECTS_COMMMANIPULATORREQUESTSCAN3D_CORE_H_ */
