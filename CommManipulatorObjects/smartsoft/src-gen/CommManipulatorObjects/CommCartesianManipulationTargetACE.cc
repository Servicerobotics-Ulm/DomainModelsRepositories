//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommManipulatorObjects/CommCartesianManipulationTargetACE.hh"
#include <ace/SString.h>
#include "CommBasicObjects/CommPose3dACE.hh"
#include "CommManipulatorObjects/enumTargetVelocityTimeFlagData.hh"
#include "CommManipulatorObjects/enumBasicRobotMotionTypeData.hh"
#include "CommManipulatorObjects/enumCartesianManipulationTargetReferenceFrameData.hh"

// serialization operator for element CommCartesianManipulationTarget
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommManipulatorObjectsIDL::CommCartesianManipulationTarget &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element tcp_pose
	good_bit = good_bit && cdr << data.tcp_pose;
	// serialize list-element reference_frame
	good_bit = good_bit && cdr.write_long(data.reference_frame);
	// serialize list-element is_relative
	good_bit = good_bit && cdr.write_boolean(data.is_relative);
	// serialize list-element motion_type
	good_bit = good_bit && cdr.write_long(data.motion_type);
	// serialize list-element reach_type
	good_bit = good_bit && cdr.write_long(data.reach_type);
	// serialize list-element velocity
	good_bit = good_bit && cdr.write_float(data.velocity);
	// serialize list-element acceleration
	good_bit = good_bit && cdr.write_float(data.acceleration);
	// serialize list-element reach_time
	good_bit = good_bit && cdr.write_float(data.reach_time);
	// serialize list-element blending_radius
	good_bit = good_bit && cdr.write_float(data.blending_radius);
	// serialize list-element motion_constraints
	good_bit = good_bit && cdr.write_octet(data.motion_constraints);
	
	return good_bit;
}

// de-serialization operator for element CommCartesianManipulationTarget
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommManipulatorObjectsIDL::CommCartesianManipulationTarget &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element tcp_pose
	good_bit = good_bit && cdr >> data.tcp_pose;
	// deserialize type element reference_frame
	good_bit = good_bit && cdr.read_long(data.reference_frame);
	// deserialize type element is_relative
	good_bit = good_bit && cdr.read_boolean(data.is_relative);
	// deserialize type element motion_type
	good_bit = good_bit && cdr.read_long(data.motion_type);
	// deserialize type element reach_type
	good_bit = good_bit && cdr.read_long(data.reach_type);
	// deserialize type element velocity
	good_bit = good_bit && cdr.read_float(data.velocity);
	// deserialize type element acceleration
	good_bit = good_bit && cdr.read_float(data.acceleration);
	// deserialize type element reach_time
	good_bit = good_bit && cdr.read_float(data.reach_time);
	// deserialize type element blending_radius
	good_bit = good_bit && cdr.read_float(data.blending_radius);
	// deserialize type element motion_constraints
	good_bit = good_bit && cdr.read_octet(data.motion_constraints);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommCartesianManipulationTarget
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommManipulatorObjects::CommCartesianManipulationTarget &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommCartesianManipulationTarget
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommManipulatorObjects::CommCartesianManipulationTarget &obj)
{
	return cdr >> obj.set();
}
