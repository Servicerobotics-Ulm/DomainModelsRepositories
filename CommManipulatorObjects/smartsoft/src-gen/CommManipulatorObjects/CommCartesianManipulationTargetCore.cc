//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommManipulatorObjects/CommCartesianManipulationTargetCore.hh"

// serialization/deserialization operators
//#include "CommManipulatorObjects/CommCartesianManipulationTargetACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace CommManipulatorObjects 
{
	const char* CommCartesianManipulationTargetCore::getCompiledHash()
	{
		return CommManipulatorObjectsIDL::REPO_HASH;
	}
	
	void CommCartesianManipulationTargetCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for CommBasicObjects::CommPose3d(idl_CommCartesianManipulationTarget.tcp_pose)
		CommBasicObjects::CommPose3d::getAllHashValues(hashes);
	}
	
	void CommCartesianManipulationTargetCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "CommCartesianManipulationTargetCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for CommBasicObjects::CommPose3d(idl_CommCartesianManipulationTarget.tcp_pose)
		CommBasicObjects::CommPose3d::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t CommCartesianManipulationTargetCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		seed += CommBasicObjects::CommPose3d::generateDataHash(data.tcp_pose);
		boost::hash_combine(seed, data.reference_frame);
		boost::hash_combine(seed, data.is_relative);
		boost::hash_combine(seed, data.motion_type);
		boost::hash_combine(seed, data.reach_type);
		boost::hash_combine(seed, data.velocity);
		boost::hash_combine(seed, data.acceleration);
		boost::hash_combine(seed, data.reach_time);
		boost::hash_combine(seed, data.blending_radius);
		boost::hash_combine(seed, data.motion_constraints);
		
		return seed;
	}
	#endif
	
	// default constructor
	CommCartesianManipulationTargetCore::CommCartesianManipulationTargetCore()
	:	idl_CommCartesianManipulationTarget()
	{  
		setTcp_pose(CommBasicObjects::CommPose3d());
		setReference_frame(CommManipulatorObjects::CartesianManipulationTargetReferenceFrame());
		setIs_relative(false);
		setMotion_type(CommManipulatorObjects::BasicRobotMotionType());
		setReach_type(CommManipulatorObjects::TargetVelocityTimeFlag());
		setVelocity(0.0);
		setAcceleration(0.0);
		setReach_time(0.0);
		setBlending_radius(0.0);
		setMotion_constraints(0);
	}
	
	CommCartesianManipulationTargetCore::CommCartesianManipulationTargetCore(const DATATYPE &data)
	:	idl_CommCartesianManipulationTarget(data)
	{  }

	CommCartesianManipulationTargetCore::~CommCartesianManipulationTargetCore()
	{  }
	
	void CommCartesianManipulationTargetCore::to_ostream(std::ostream &os) const
	{
	  os << "CommCartesianManipulationTarget(";
	  getTcp_pose().to_ostream(os);
	  getReference_frame().to_ostream(os);
	  os << getIs_relative() << " ";
	  getMotion_type().to_ostream(os);
	  getReach_type().to_ostream(os);
	  os << getVelocity() << " ";
	  os << getAcceleration() << " ";
	  os << getReach_time() << " ";
	  os << getBlending_radius() << " ";
	  os << getMotion_constraints() << " ";
	  os << ") ";
	}
	
	// convert to xml stream
	void CommCartesianManipulationTargetCore::to_xml(std::ostream &os, const std::string &indent) const {
		os << indent << "<tcp_pose>";
		getTcp_pose().to_xml(os, indent);
		os << indent << "</tcp_pose>";
		os << indent << "<reference_frame>";
		getReference_frame().to_xml(os, indent);
		os << indent << "</reference_frame>";
		os << indent << "<is_relative>" << getIs_relative() << "</is_relative>";
		os << indent << "<motion_type>";
		getMotion_type().to_xml(os, indent);
		os << indent << "</motion_type>";
		os << indent << "<reach_type>";
		getReach_type().to_xml(os, indent);
		os << indent << "</reach_type>";
		os << indent << "<velocity>" << getVelocity() << "</velocity>";
		os << indent << "<acceleration>" << getAcceleration() << "</acceleration>";
		os << indent << "<reach_time>" << getReach_time() << "</reach_time>";
		os << indent << "<blending_radius>" << getBlending_radius() << "</blending_radius>";
		os << indent << "<motion_constraints>" << getMotion_constraints() << "</motion_constraints>";
	}
	
	// restore from xml stream
	void CommCartesianManipulationTargetCore::from_xml(std::istream &is) {
		static const Smart::KnuthMorrisPratt kmp_tcp_pose("<tcp_pose>");
		static const Smart::KnuthMorrisPratt kmp_reference_frame("<reference_frame>");
		static const Smart::KnuthMorrisPratt kmp_is_relative("<is_relative>");
		static const Smart::KnuthMorrisPratt kmp_motion_type("<motion_type>");
		static const Smart::KnuthMorrisPratt kmp_reach_type("<reach_type>");
		static const Smart::KnuthMorrisPratt kmp_velocity("<velocity>");
		static const Smart::KnuthMorrisPratt kmp_acceleration("<acceleration>");
		static const Smart::KnuthMorrisPratt kmp_reach_time("<reach_time>");
		static const Smart::KnuthMorrisPratt kmp_blending_radius("<blending_radius>");
		static const Smart::KnuthMorrisPratt kmp_motion_constraints("<motion_constraints>");
		
		if(kmp_tcp_pose.search(is)) {
			CommBasicObjects::CommPose3d tcp_poseItem;
			tcp_poseItem.from_xml(is);
			setTcp_pose(tcp_poseItem);
		}
		if(kmp_reference_frame.search(is)) {
			CommManipulatorObjects::CartesianManipulationTargetReferenceFrame reference_frameItem;
			reference_frameItem.from_xml(is);
			setReference_frame(reference_frameItem);
		}
		if(kmp_is_relative.search(is)) {
			bool is_relativeItem;
			is >> is_relativeItem;
			setIs_relative(is_relativeItem);
		}
		if(kmp_motion_type.search(is)) {
			CommManipulatorObjects::BasicRobotMotionType motion_typeItem;
			motion_typeItem.from_xml(is);
			setMotion_type(motion_typeItem);
		}
		if(kmp_reach_type.search(is)) {
			CommManipulatorObjects::TargetVelocityTimeFlag reach_typeItem;
			reach_typeItem.from_xml(is);
			setReach_type(reach_typeItem);
		}
		if(kmp_velocity.search(is)) {
			float velocityItem;
			is >> velocityItem;
			setVelocity(velocityItem);
		}
		if(kmp_acceleration.search(is)) {
			float accelerationItem;
			is >> accelerationItem;
			setAcceleration(accelerationItem);
		}
		if(kmp_reach_time.search(is)) {
			float reach_timeItem;
			is >> reach_timeItem;
			setReach_time(reach_timeItem);
		}
		if(kmp_blending_radius.search(is)) {
			float blending_radiusItem;
			is >> blending_radiusItem;
			setBlending_radius(blending_radiusItem);
		}
		if(kmp_motion_constraints.search(is)) {
			unsigned char motion_constraintsItem;
			is >> motion_constraintsItem;
			setMotion_constraints(motion_constraintsItem);
		}
	}
	
	/*
	void CommCartesianManipulationTargetCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		CommManipulatorObjectsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(CommManipulatorObjectsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see CommCartesianManipulationTargetACE.hh)
		cdr << idl_CommCartesianManipulationTarget;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_CommCartesianManipulationTarget);
		cdr << data_hash;
		// std::cout << "CommCartesianManipulationTargetCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void CommCartesianManipulationTargetCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		CommManipulatorObjectsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see CommCartesianManipulationTargetACE.hh)
		cdr >> idl_CommCartesianManipulationTarget;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_CommCartesianManipulationTarget);
		assert(data_hash == own_hash);
		// std::cout << "CommCartesianManipulationTargetCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace CommManipulatorObjects */
