//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATOROBJECTS_COMMMANIPULATORSTATE_CORE_H_
#define COMMMANIPULATOROBJECTS_COMMMANIPULATORSTATE_CORE_H_

#include "CommManipulatorObjects/CommManipulatorStateData.hh"
#include "CommBasicObjects/CommPose3d.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommManipulatorObjects {
	
class CommManipulatorStateCore {
protected:
	// data structure
	CommManipulatorObjectsIDL::CommManipulatorState idl_CommManipulatorState;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommManipulatorObjectsIDL::CommManipulatorState DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommManipulatorStateCore();
	CommManipulatorStateCore(const DATATYPE &data);
	// default destructor
	virtual ~CommManipulatorStateCore();
	
	const DATATYPE& get() const { return idl_CommManipulatorState; }
	operator const DATATYPE&() const { return idl_CommManipulatorState; }
	DATATYPE& set() { return idl_CommManipulatorState; }

	static inline std::string identifier(void) { return "CommManipulatorObjects::CommManipulatorState"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Id
	inline unsigned int getId() const { return idl_CommManipulatorState.id; }
	inline CommManipulatorStateCore& setId(const unsigned int &id) { idl_CommManipulatorState.id = id; return *this; }
	
	// getter and setter for element Joint_angles
	/**
	 * Getter methods for idl_CommManipulatorState.joint_angles of type vector<double>
	 */
	inline std::vector<double>& getJoint_anglesRef() { return idl_CommManipulatorState.joint_angles; }
	inline std::vector<double> getJoint_anglesCopy() const {
		return std::vector<double>(idl_CommManipulatorState.joint_angles.begin(), idl_CommManipulatorState.joint_angles.end());
	}
	inline double getJoint_anglesElemAtPos(const size_t &pos) const { return idl_CommManipulatorState.joint_angles[pos]; }
	inline size_t getJoint_anglesSize() const { return idl_CommManipulatorState.joint_angles.size(); }
	inline bool isJoint_anglesEmpty() const { return idl_CommManipulatorState.joint_angles.empty(); }
	/**
	 * Setter methods for idl_CommManipulatorState.joint_angles of type vector<double>
	 */
	inline CommManipulatorStateCore& setJoint_angles(const std::vector<double> &joint_angles) { idl_CommManipulatorState.joint_angles = joint_angles; return *this; }
	inline bool setJoint_anglesElemAtPos(const size_t &pos, const double &elem) {
		if(pos < idl_CommManipulatorState.joint_angles.size()) {
			idl_CommManipulatorState.joint_angles[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertJoint_anglesVectorAtPos(const size_t &pos, const std::vector<double> &data) {
		if(pos <= idl_CommManipulatorState.joint_angles.size()) {
			idl_CommManipulatorState.joint_angles.insert(idl_CommManipulatorState.joint_angles.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeJoint_angles(const size_t &size) { idl_CommManipulatorState.joint_angles.resize(size); }
	inline bool eraseJoint_anglesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommManipulatorState.joint_angles.size() ) {
			idl_CommManipulatorState.joint_angles.erase(idl_CommManipulatorState.joint_angles.begin()+pos, idl_CommManipulatorState.joint_angles.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearJoint_angles() { idl_CommManipulatorState.joint_angles.clear(); }
	
	// getter and setter for element Pose_tcp
	inline CommBasicObjects::CommPose3d getPose_tcp() const { return CommBasicObjects::CommPose3d(idl_CommManipulatorState.pose_tcp); }
	inline CommManipulatorStateCore& setPose_tcp(const CommBasicObjects::CommPose3d &pose_tcp) { idl_CommManipulatorState.pose_tcp = pose_tcp; return *this; }
	
	// getter and setter for element Motion_constraints
	inline unsigned char getMotion_constraints() const { return idl_CommManipulatorState.motion_constraints; }
	inline CommManipulatorStateCore& setMotion_constraints(const unsigned char &motion_constraints) { idl_CommManipulatorState.motion_constraints = motion_constraints; return *this; }
	
	// getter and setter for element Pose_manipulator
	inline CommBasicObjects::CommPose3d getPose_manipulator() const { return CommBasicObjects::CommPose3d(idl_CommManipulatorState.pose_manipulator); }
	inline CommManipulatorStateCore& setPose_manipulator(const CommBasicObjects::CommPose3d &pose_manipulator) { idl_CommManipulatorState.pose_manipulator = pose_manipulator; return *this; }
	
	// getter and setter for element Is_valid
	inline bool getIs_valid() const { return idl_CommManipulatorState.is_valid; }
	inline CommManipulatorStateCore& setIs_valid(const bool &is_valid) { idl_CommManipulatorState.is_valid = is_valid; return *this; }
};

} /* namespace CommManipulatorObjects */
#endif /* COMMMANIPULATOROBJECTS_COMMMANIPULATORSTATE_CORE_H_ */
