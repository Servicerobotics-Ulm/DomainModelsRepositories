//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATOROBJECTS_COMMINVERSEKINEMATICSREQUEST_CORE_H_
#define COMMMANIPULATOROBJECTS_COMMINVERSEKINEMATICSREQUEST_CORE_H_

#include "CommManipulatorObjects/CommInverseKinematicsRequestData.hh"
#include "CommBasicObjects/CommPose3d.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommManipulatorObjects {
	
class CommInverseKinematicsRequestCore {
protected:
	// data structure
	CommManipulatorObjectsIDL::CommInverseKinematicsRequest idl_CommInverseKinematicsRequest;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommManipulatorObjectsIDL::CommInverseKinematicsRequest DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommInverseKinematicsRequestCore();
	CommInverseKinematicsRequestCore(const DATATYPE &data);
	// default destructor
	virtual ~CommInverseKinematicsRequestCore();
	
	const DATATYPE& get() const { return idl_CommInverseKinematicsRequest; }
	operator const DATATYPE&() const { return idl_CommInverseKinematicsRequest; }
	DATATYPE& set() { return idl_CommInverseKinematicsRequest; }

	static inline std::string identifier(void) { return "CommManipulatorObjects::CommInverseKinematicsRequest"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Tcp_pose
	inline CommBasicObjects::CommPose3d getTcp_pose() const { return CommBasicObjects::CommPose3d(idl_CommInverseKinematicsRequest.tcp_pose); }
	inline CommInverseKinematicsRequestCore& setTcp_pose(const CommBasicObjects::CommPose3d &tcp_pose) { idl_CommInverseKinematicsRequest.tcp_pose = tcp_pose; return *this; }
	
	// getter and setter for element Is_relative
	inline bool getIs_relative() const { return idl_CommInverseKinematicsRequest.is_relative; }
	inline CommInverseKinematicsRequestCore& setIs_relative(const bool &is_relative) { idl_CommInverseKinematicsRequest.is_relative = is_relative; return *this; }
	
	// getter and setter for element Motion_constraints
	inline unsigned char getMotion_constraints() const { return idl_CommInverseKinematicsRequest.motion_constraints; }
	inline CommInverseKinematicsRequestCore& setMotion_constraints(const unsigned char &motion_constraints) { idl_CommInverseKinematicsRequest.motion_constraints = motion_constraints; return *this; }
};

} /* namespace CommManipulatorObjects */
#endif /* COMMMANIPULATOROBJECTS_COMMINVERSEKINEMATICSREQUEST_CORE_H_ */
