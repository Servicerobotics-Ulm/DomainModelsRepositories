//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATOROBJECTS_COMMJOINTVALUES_CORE_H_
#define COMMMANIPULATOROBJECTS_COMMJOINTVALUES_CORE_H_

#include "CommManipulatorObjects/CommJointValuesData.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommManipulatorObjects {
	
class CommJointValuesCore {
protected:
	// data structure
	CommManipulatorObjectsIDL::CommJointValues idl_CommJointValues;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommManipulatorObjectsIDL::CommJointValues DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommJointValuesCore();
	CommJointValuesCore(const DATATYPE &data);
	// default destructor
	virtual ~CommJointValuesCore();
	
	const DATATYPE& get() const { return idl_CommJointValues; }
	operator const DATATYPE&() const { return idl_CommJointValues; }
	DATATYPE& set() { return idl_CommJointValues; }

	static inline std::string identifier(void) { return "CommManipulatorObjects::CommJointValues"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Values
	/**
	 * Getter methods for idl_CommJointValues.values of type vector<double>
	 */
	inline std::vector<double>& getValuesRef() { return idl_CommJointValues.values; }
	inline std::vector<double> getValuesCopy() const {
		return std::vector<double>(idl_CommJointValues.values.begin(), idl_CommJointValues.values.end());
	}
	inline double getValuesElemAtPos(const size_t &pos) const { return idl_CommJointValues.values[pos]; }
	inline size_t getValuesSize() const { return idl_CommJointValues.values.size(); }
	inline bool isValuesEmpty() const { return idl_CommJointValues.values.empty(); }
	/**
	 * Setter methods for idl_CommJointValues.values of type vector<double>
	 */
	inline CommJointValuesCore& setValues(const std::vector<double> &values) { idl_CommJointValues.values = values; return *this; }
	inline bool setValuesElemAtPos(const size_t &pos, const double &elem) {
		if(pos < idl_CommJointValues.values.size()) {
			idl_CommJointValues.values[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertValuesVectorAtPos(const size_t &pos, const std::vector<double> &data) {
		if(pos <= idl_CommJointValues.values.size()) {
			idl_CommJointValues.values.insert(idl_CommJointValues.values.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeValues(const size_t &size) { idl_CommJointValues.values.resize(size); }
	inline bool eraseValuesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommJointValues.values.size() ) {
			idl_CommJointValues.values.erase(idl_CommJointValues.values.begin()+pos, idl_CommJointValues.values.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearValues() { idl_CommJointValues.values.clear(); }
	
	// getter and setter for element Time
	inline float getTime() const { return idl_CommJointValues.time; }
	inline CommJointValuesCore& setTime(const float &time) { idl_CommJointValues.time = time; return *this; }
};

} /* namespace CommManipulatorObjects */
#endif /* COMMMANIPULATOROBJECTS_COMMJOINTVALUES_CORE_H_ */
