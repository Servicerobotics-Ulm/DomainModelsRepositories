//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMMANIPULATOROBJECTS_COMMJOINTMANIPULATIONTARGET_CORE_H_
#define COMMMANIPULATOROBJECTS_COMMJOINTMANIPULATIONTARGET_CORE_H_

#include "CommManipulatorObjects/CommJointManipulationTargetData.hh"
#include "CommManipulatorObjects/enumBasicRobotMotionType.hh"
#include "CommManipulatorObjects/enumTargetVelocityTimeFlag.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommManipulatorObjects {
	
class CommJointManipulationTargetCore {
protected:
	// data structure
	CommManipulatorObjectsIDL::CommJointManipulationTarget idl_CommJointManipulationTarget;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommManipulatorObjectsIDL::CommJointManipulationTarget DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommJointManipulationTargetCore();
	CommJointManipulationTargetCore(const DATATYPE &data);
	// default destructor
	virtual ~CommJointManipulationTargetCore();
	
	const DATATYPE& get() const { return idl_CommJointManipulationTarget; }
	operator const DATATYPE&() const { return idl_CommJointManipulationTarget; }
	DATATYPE& set() { return idl_CommJointManipulationTarget; }

	static inline std::string identifier(void) { return "CommManipulatorObjects::CommJointManipulationTarget"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Joint_angles
	/**
	 * Getter methods for idl_CommJointManipulationTarget.joint_angles of type vector<float>
	 */
	inline std::vector<float>& getJoint_anglesRef() { return idl_CommJointManipulationTarget.joint_angles; }
	inline std::vector<float> getJoint_anglesCopy() const {
		return std::vector<float>(idl_CommJointManipulationTarget.joint_angles.begin(), idl_CommJointManipulationTarget.joint_angles.end());
	}
	inline float getJoint_anglesElemAtPos(const size_t &pos) const { return idl_CommJointManipulationTarget.joint_angles[pos]; }
	inline size_t getJoint_anglesSize() const { return idl_CommJointManipulationTarget.joint_angles.size(); }
	inline bool isJoint_anglesEmpty() const { return idl_CommJointManipulationTarget.joint_angles.empty(); }
	/**
	 * Setter methods for idl_CommJointManipulationTarget.joint_angles of type vector<float>
	 */
	inline CommJointManipulationTargetCore& setJoint_angles(const std::vector<float> &joint_angles) { idl_CommJointManipulationTarget.joint_angles = joint_angles; return *this; }
	inline bool setJoint_anglesElemAtPos(const size_t &pos, const float &elem) {
		if(pos < idl_CommJointManipulationTarget.joint_angles.size()) {
			idl_CommJointManipulationTarget.joint_angles[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertJoint_anglesVectorAtPos(const size_t &pos, const std::vector<float> &data) {
		if(pos <= idl_CommJointManipulationTarget.joint_angles.size()) {
			idl_CommJointManipulationTarget.joint_angles.insert(idl_CommJointManipulationTarget.joint_angles.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeJoint_angles(const size_t &size) { idl_CommJointManipulationTarget.joint_angles.resize(size); }
	inline bool eraseJoint_anglesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommJointManipulationTarget.joint_angles.size() ) {
			idl_CommJointManipulationTarget.joint_angles.erase(idl_CommJointManipulationTarget.joint_angles.begin()+pos, idl_CommJointManipulationTarget.joint_angles.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearJoint_angles() { idl_CommJointManipulationTarget.joint_angles.clear(); }
	
	// getter and setter for element Is_relative
	inline bool getIs_relative() const { return idl_CommJointManipulationTarget.is_relative; }
	inline CommJointManipulationTargetCore& setIs_relative(const bool &is_relative) { idl_CommJointManipulationTarget.is_relative = is_relative; return *this; }
	
	// getter and setter for element Motion_type
	inline CommManipulatorObjects::BasicRobotMotionType getMotion_type() const { return CommManipulatorObjects::BasicRobotMotionType(idl_CommJointManipulationTarget.motion_type); }
	inline CommJointManipulationTargetCore& setMotion_type(const CommManipulatorObjects::BasicRobotMotionType &motion_type) { idl_CommJointManipulationTarget.motion_type = motion_type; return *this; }
	
	// getter and setter for element Reach_type
	inline CommManipulatorObjects::TargetVelocityTimeFlag getReach_type() const { return CommManipulatorObjects::TargetVelocityTimeFlag(idl_CommJointManipulationTarget.reach_type); }
	inline CommJointManipulationTargetCore& setReach_type(const CommManipulatorObjects::TargetVelocityTimeFlag &reach_type) { idl_CommJointManipulationTarget.reach_type = reach_type; return *this; }
	
	// getter and setter for element Velocity
	inline float getVelocity() const { return idl_CommJointManipulationTarget.velocity; }
	inline CommJointManipulationTargetCore& setVelocity(const float &velocity) { idl_CommJointManipulationTarget.velocity = velocity; return *this; }
	
	// getter and setter for element Acceleration
	inline float getAcceleration() const { return idl_CommJointManipulationTarget.acceleration; }
	inline CommJointManipulationTargetCore& setAcceleration(const float &acceleration) { idl_CommJointManipulationTarget.acceleration = acceleration; return *this; }
	
	// getter and setter for element Reach_time
	inline float getReach_time() const { return idl_CommJointManipulationTarget.reach_time; }
	inline CommJointManipulationTargetCore& setReach_time(const float &reach_time) { idl_CommJointManipulationTarget.reach_time = reach_time; return *this; }
	
	// getter and setter for element Blending_radius
	inline float getBlending_radius() const { return idl_CommJointManipulationTarget.blending_radius; }
	inline CommJointManipulationTargetCore& setBlending_radius(const float &blending_radius) { idl_CommJointManipulationTarget.blending_radius = blending_radius; return *this; }
};

} /* namespace CommManipulatorObjects */
#endif /* COMMMANIPULATOROBJECTS_COMMJOINTMANIPULATIONTARGET_CORE_H_ */
