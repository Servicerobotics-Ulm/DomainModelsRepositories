//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommManipulatorObjects/CommManipulationTrajectoryACE.hh"
#include <ace/SString.h>
#include "CommManipulatorObjects/enumManipulatorTrajectoryFlagData.hh"
#include "CommManipulatorObjects/CommCartesianManipulationTargetACE.hh"
#include "CommManipulatorObjects/CommJointManipulationTargetACE.hh"

// serialization operator for element CommManipulationTrajectory
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommManipulatorObjectsIDL::CommManipulationTrajectory &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element joint_angles
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.joint_angles.size());
	std::vector<CommManipulatorObjectsIDL::CommJointManipulationTarget>::const_iterator data_joint_anglesIt;
	for(data_joint_anglesIt=data.joint_angles.begin(); data_joint_anglesIt!=data.joint_angles.end(); data_joint_anglesIt++) {
		good_bit = good_bit && cdr << *data_joint_anglesIt;
	}
	// serialize list-element tcp_poses
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.tcp_poses.size());
	std::vector<CommManipulatorObjectsIDL::CommCartesianManipulationTarget>::const_iterator data_tcp_posesIt;
	for(data_tcp_posesIt=data.tcp_poses.begin(); data_tcp_posesIt!=data.tcp_poses.end(); data_tcp_posesIt++) {
		good_bit = good_bit && cdr << *data_tcp_posesIt;
	}
	// serialize list-element type
	good_bit = good_bit && cdr.write_long(data.type);
	
	return good_bit;
}

// de-serialization operator for element CommManipulationTrajectory
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommManipulatorObjectsIDL::CommManipulationTrajectory &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize list-type element joint_angles
	ACE_CDR::ULong data_joint_anglesNbr;
	good_bit = good_bit && cdr >> data_joint_anglesNbr;
	data.joint_angles.clear();
	CommManipulatorObjectsIDL::CommJointManipulationTarget data_joint_anglesItem;
	for(ACE_CDR::ULong i=0; i<data_joint_anglesNbr; ++i) {
		good_bit = good_bit && cdr >> data_joint_anglesItem;
		data.joint_angles.push_back(data_joint_anglesItem);
	}
	// deserialize list-type element tcp_poses
	ACE_CDR::ULong data_tcp_posesNbr;
	good_bit = good_bit && cdr >> data_tcp_posesNbr;
	data.tcp_poses.clear();
	CommManipulatorObjectsIDL::CommCartesianManipulationTarget data_tcp_posesItem;
	for(ACE_CDR::ULong i=0; i<data_tcp_posesNbr; ++i) {
		good_bit = good_bit && cdr >> data_tcp_posesItem;
		data.tcp_poses.push_back(data_tcp_posesItem);
	}
	// deserialize type element type
	good_bit = good_bit && cdr.read_long(data.type);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommManipulationTrajectory
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommManipulatorObjects::CommManipulationTrajectory &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommManipulationTrajectory
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommManipulatorObjects::CommManipulationTrajectory &obj)
{
	return cdr >> obj.set();
}
