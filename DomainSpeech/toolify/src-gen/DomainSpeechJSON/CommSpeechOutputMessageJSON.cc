//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommSpeechOutputMessageJSON.hh"

#include "CommBasicObjectsJSON/CommTimeStampJSON.hh"

namespace DomainSpeechIDL {

void to_json(const DomainSpeechIDL::CommSpeechOutputMessage& obj, nlohmann::json& j)
{
	// time: CommTimeStamp
	to_json(obj.time, j["time"]);
	// reset: Boolean
	j["reset"] = obj.reset;
	// ttl: Float
	j["ttl"] = obj.ttl;
	// text: String
	j["text"] = obj.text;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, DomainSpeechIDL::CommSpeechOutputMessage& obj)
{
	// time: CommTimeStamp
	if(j.contains("time") && j["time"].is_object()) {
		//from_json(j["time"], obj.time);
		obj.time = j["time"].get<CommBasicObjectsIDL::CommTimeStamp>();
	}
	// reset: Boolean
	if(j.contains("reset") && j["reset"].is_boolean()) {
		obj.reset = j["reset"].get<bool>();
	}
	// ttl: Float
	if(j.contains("ttl") && j["ttl"].is_number_float()) {
		obj.ttl = j["ttl"].get<float>();
	}
	// text: String
	if(j.contains("text") && j["text"].is_string()) {
		obj.text = j["text"].get<std::string>();
	}
}

} // end namespace DomainSpeechIDL
