//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommImageObjectRecognitionResultJSON.hh"

#include "CommObjectRecognitionObjectsJSON/CommObjectBeliefJSON.hh"

namespace CommObjectRecognitionObjectsIDL {

void to_json(const CommObjectRecognitionObjectsIDL::CommImageObjectRecognitionResult& obj, nlohmann::json& j)
{
	// xmin: UInt32
	j["xmin"] = obj.xmin;
	// ymin: UInt32
	j["ymin"] = obj.ymin;
	// xmax: UInt32
	j["xmax"] = obj.xmax;
	// ymax: UInt32
	j["ymax"] = obj.ymax;
	// belief: CommObjectBelief
	to_json(obj.belief, j["belief"]);
	// objectId: UInt32
	j["objectId"] = obj.objectId;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommObjectRecognitionObjectsIDL::CommImageObjectRecognitionResult& obj)
{
	// xmin: UInt32
	if(j.contains("xmin") && j["xmin"].is_number_unsigned()) {
		obj.xmin = j["xmin"].get<unsigned int>();
	}
	// ymin: UInt32
	if(j.contains("ymin") && j["ymin"].is_number_unsigned()) {
		obj.ymin = j["ymin"].get<unsigned int>();
	}
	// xmax: UInt32
	if(j.contains("xmax") && j["xmax"].is_number_unsigned()) {
		obj.xmax = j["xmax"].get<unsigned int>();
	}
	// ymax: UInt32
	if(j.contains("ymax") && j["ymax"].is_number_unsigned()) {
		obj.ymax = j["ymax"].get<unsigned int>();
	}
	// belief: CommObjectBelief
	if(j.contains("belief") && j["belief"].is_object()) {
		//from_json(j["belief"], obj.belief);
		obj.belief = j["belief"].get<CommObjectRecognitionObjectsIDL::CommObjectBelief>();
	}
	// objectId: UInt32
	if(j.contains("objectId") && j["objectId"].is_number_unsigned()) {
		obj.objectId = j["objectId"].get<unsigned int>();
	}
}

} // end namespace CommObjectRecognitionObjectsIDL
