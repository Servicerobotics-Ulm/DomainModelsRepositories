//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommTriMeshJSON.hh"


namespace CommObjectRecognitionObjectsIDL {

void to_json(const CommObjectRecognitionObjectsIDL::CommTriMesh& obj, nlohmann::json& j)
{
	// vertices_p1: UInt32[]
	j["vertices_p1"] = obj.vertices_p1;
	// vertices_p2: UInt32[]
	j["vertices_p2"] = obj.vertices_p2;
	// vertices_p3: UInt32[]
	j["vertices_p3"] = obj.vertices_p3;
	// points_x: Double[]
	j["points_x"] = obj.points_x;
	// points_y: Double[]
	j["points_y"] = obj.points_y;
	// points_z: Double[]
	j["points_z"] = obj.points_z;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommObjectRecognitionObjectsIDL::CommTriMesh& obj)
{
	// vertices_p1: UInt32[]
	if(j.contains("vertices_p1") && j["vertices_p1"].is_array()) {
		obj.vertices_p1 = j["vertices_p1"].get<std::vector<unsigned int>>();
	}
	// vertices_p2: UInt32[]
	if(j.contains("vertices_p2") && j["vertices_p2"].is_array()) {
		obj.vertices_p2 = j["vertices_p2"].get<std::vector<unsigned int>>();
	}
	// vertices_p3: UInt32[]
	if(j.contains("vertices_p3") && j["vertices_p3"].is_array()) {
		obj.vertices_p3 = j["vertices_p3"].get<std::vector<unsigned int>>();
	}
	// points_x: Double[]
	if(j.contains("points_x") && j["points_x"].is_array()) {
		obj.points_x = j["points_x"].get<std::vector<double>>();
	}
	// points_y: Double[]
	if(j.contains("points_y") && j["points_y"].is_array()) {
		obj.points_y = j["points_y"].get<std::vector<double>>();
	}
	// points_z: Double[]
	if(j.contains("points_z") && j["points_z"].is_array()) {
		obj.points_z = j["points_z"].get<std::vector<double>>();
	}
}

} // end namespace CommObjectRecognitionObjectsIDL
