//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommObjectRecognitionObjects/CommObjectBeliefACE.hh"
#include <ace/SString.h>
#include "CommBasicObjects/CommPose3dACE.hh"

// serialization operator for element CommObjectBelief
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommObjectRecognitionObjectsIDL::CommObjectBelief &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element type
	good_bit = good_bit && cdr << ACE_CString(data.type.c_str());
	// serialize list-element objClass
	good_bit = good_bit && cdr << ACE_CString(data.objClass.c_str());
	// serialize list-element probability
	good_bit = good_bit && cdr.write_double(data.probability);
	// serialize list-element pose
	good_bit = good_bit && cdr << data.pose;
	// serialize list-element cov
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.cov.size());
	good_bit = good_bit && cdr.write_double_array(data.cov.data(), data.cov.size());
	// serialize list-element validPosePdf
	good_bit = good_bit && cdr.write_boolean(data.validPosePdf);
	// serialize list-element validPose
	good_bit = good_bit && cdr.write_boolean(data.validPose);
	
	return good_bit;
}

// de-serialization operator for element CommObjectBelief
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommObjectRecognitionObjectsIDL::CommObjectBelief &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize string-type element type
	ACE_CString data_type_str;
	good_bit = good_bit && cdr >> data_type_str;
	data.type = data_type_str.c_str();
	// deserialize string-type element objClass
	ACE_CString data_objClass_str;
	good_bit = good_bit && cdr >> data_objClass_str;
	data.objClass = data_objClass_str.c_str();
	// deserialize type element probability
	good_bit = good_bit && cdr.read_double(data.probability);
	// deserialize type element pose
	good_bit = good_bit && cdr >> data.pose;
	// deserialize list-type element cov
	ACE_CDR::ULong data_covNbr;
	good_bit = good_bit && cdr >> data_covNbr;
	data.cov.resize(data_covNbr);
	good_bit = good_bit && cdr.read_double_array(data.cov.data(), data_covNbr);
	// deserialize type element validPosePdf
	good_bit = good_bit && cdr.read_boolean(data.validPosePdf);
	// deserialize type element validPose
	good_bit = good_bit && cdr.read_boolean(data.validPose);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommObjectBelief
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommObjectRecognitionObjects::CommObjectBelief &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommObjectBelief
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommObjectRecognitionObjects::CommObjectBelief &obj)
{
	return cdr >> obj.set();
}
