//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommPTUStateJSON.hh"

#include "CommBasicObjectsJSON/CommPose3dJSON.hh"

namespace DomainPTUIDL {

void to_json(const DomainPTUIDL::CommPTUState& obj, nlohmann::json& j)
{
	// pan: Double
	j["pan"] = obj.pan;
	// tilt: Double
	j["tilt"] = obj.tilt;
	// pose_PTU: CommPose3d
	to_json(obj.pose_PTU, j["pose_PTU"]);
	// is_valid: Boolean
	j["is_valid"] = obj.is_valid;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, DomainPTUIDL::CommPTUState& obj)
{
	// pan: Double
	if(j.contains("pan") && j["pan"].is_number_float()) {
		obj.pan = j["pan"].get<double>();
	}
	// tilt: Double
	if(j.contains("tilt") && j["tilt"].is_number_float()) {
		obj.tilt = j["tilt"].get<double>();
	}
	// pose_PTU: CommPose3d
	if(j.contains("pose_PTU") && j["pose_PTU"].is_object()) {
		//from_json(j["pose_PTU"], obj.pose_PTU);
		obj.pose_PTU = j["pose_PTU"].get<CommBasicObjectsIDL::CommPose3d>();
	}
	// is_valid: Boolean
	if(j.contains("is_valid") && j["is_valid"].is_boolean()) {
		obj.is_valid = j["is_valid"].get<bool>();
	}
}

} // end namespace DomainPTUIDL
