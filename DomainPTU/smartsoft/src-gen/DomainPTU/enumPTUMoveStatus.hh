//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINPTU_PTUMOVESTATUS_ENUM_H_
#define DOMAINPTU_PTUMOVESTATUS_ENUM_H_

#include <DomainPTU/enumPTUMoveStatusData.hh>

#include <string>
#include <iostream>
#include <locale>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

namespace DomainPTU {
	
	class PTUMoveStatus {
	private:
		DomainPTUIDL::PTUMoveStatus value;
		
	public:
		enum ENUM_PTUMoveStatus {
			ENUM_VALUE_UNDEFINED = 0,
			GOAL_REACHED = 1,
			GOAL_NOT_REACHED = 2,
			TILT_OUT_OF_RANGE = 3,
			PAN_OUT_OF_RANGE = 4,
			PAN_TILT_OUT_OF_RANGE = 5,
			HALTED = 6,
			FAILURE = 7,
			UNKNOWN = 8
		};
		
		// default constructor
		PTUMoveStatus() { 
			value = ENUM_VALUE_UNDEFINED;
		}
		
		// copy constructor for enum type
		PTUMoveStatus(ENUM_PTUMoveStatus e) {
			value = static_cast<int>(e);
		}
		
		// copy constructor for IDL type (which is typically int)
		PTUMoveStatus(DomainPTUIDL::PTUMoveStatus e) {
			value = e;
		}
		
		//const DomainPTUIDL::PTUMoveStatus& get() const { return value; }
		
		// ENUM operator
		operator ENUM_PTUMoveStatus() const {
			return static_cast<ENUM_PTUMoveStatus>(value);
		}
		
		// compare operator
		bool operator == (const ENUM_PTUMoveStatus t) const {
			return this->value == t;
		}
		
		std::string to_string(const bool &use_fqn=true) const {
			std::string result = "";
			if(use_fqn == true) {
				result = "PTUMoveStatus::";
			}
			switch (value) {
				case GOAL_REACHED:
					result += "GOAL_REACHED";
					break;
				case GOAL_NOT_REACHED:
					result += "GOAL_NOT_REACHED";
					break;
				case TILT_OUT_OF_RANGE:
					result += "TILT_OUT_OF_RANGE";
					break;
				case PAN_OUT_OF_RANGE:
					result += "PAN_OUT_OF_RANGE";
					break;
				case PAN_TILT_OUT_OF_RANGE:
					result += "PAN_TILT_OUT_OF_RANGE";
					break;
				case HALTED:
					result += "HALTED";
					break;
				case FAILURE:
					result += "FAILURE";
					break;
				case UNKNOWN:
					result += "UNKNOWN";
					break;
				default:
					result += "ENUM_VALUE_UNDEFINED";
					break;
			};
			return result;
		}
		
		static PTUMoveStatus from_string(const std::string &value) {
			std::string input = value;
			std::locale l;
			for(auto &c: input) {
				// convert all characters to lower case (so string comparison works regardless of small/capital letters)
				c = std::tolower(c,l);
			}
			std::string base_name = "ptumovestatus::";
			if(input.compare(0, base_name.length(), base_name) == 0) {
				// remove basename from comparing the actual enumeration
				input.erase(0,base_name.length());
			}
			if(input == "goal_reached"){
				return PTUMoveStatus(GOAL_REACHED);
			}
			if(input == "goal_not_reached"){
				return PTUMoveStatus(GOAL_NOT_REACHED);
			}
			if(input == "tilt_out_of_range"){
				return PTUMoveStatus(TILT_OUT_OF_RANGE);
			}
			if(input == "pan_out_of_range"){
				return PTUMoveStatus(PAN_OUT_OF_RANGE);
			}
			if(input == "pan_tilt_out_of_range"){
				return PTUMoveStatus(PAN_TILT_OUT_OF_RANGE);
			}
			if(input == "halted"){
				return PTUMoveStatus(HALTED);
			}
			if(input == "failure"){
				return PTUMoveStatus(FAILURE);
			}
			if(input == "unknown"){
				return PTUMoveStatus(UNKNOWN);
			}
			// default (if none of the preceding options match)
			return PTUMoveStatus();
		}
		
		// helper method to easily implement output stream
		void to_ostream(std::ostream &os = std::cout) const {
			os << to_string();
		}
		
		// convert to xml stream
		void to_xml(std::ostream &os, const std::string &indent = "") const {
			os << indent << "<value>" << value << "</value>";
		}
		
		// restore from xml stream
		void from_xml(std::istream &is) {
			static const Smart::KnuthMorrisPratt kmp_value("<value>");
			if(kmp_value.search(is)) {
				is >> value;
			}
		}
	
	};
	
	inline std::ostream &operator<<(std::ostream &os, const PTUMoveStatus &e)
	{
		e.to_ostream(os);
		return os;
	}
};

#endif
