//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2018 Servicerobotik Ulm
//
//  Service Robotics Research Center
//  University of Applied Sciences Ulm
//  Prittwitzstr. 10
//  89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------



#ifndef DOMAINPTU_COMMMOBILEPTUSTATE_H_
#define DOMAINPTU_COMMMOBILEPTUSTATE_H_

#include "DomainPTU/CommMobilePTUStateCore.hh"

namespace DomainPTU {
		
class CommMobilePTUState : public CommMobilePTUStateCore {
	public:
		// default constructors
		CommMobilePTUState();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommMobilePTUState(const DomainPTU::CommPTUState &ptu_state, const CommBasicObjects::CommBaseState &base_state);
		
		CommMobilePTUState(const CommMobilePTUStateCore &commMobilePTUState);
		CommMobilePTUState(const DATATYPE &commMobilePTUState);
		virtual ~CommMobilePTUState();
		
		// use framework specific getter and setter methods from core (base) class
		using CommMobilePTUStateCore::get;
		using CommMobilePTUStateCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline CommBasicObjects::CommBaseState getBase_state() const
		{
			return CommBasicObjects::CommBaseState(
					idl_CommMobilePTUState.base_state);
		}
		inline void setBase_state(const CommBasicObjects::CommBaseState &base_state)
		{
			idl_CommMobilePTUState.base_state = base_state;
		}

		inline DomainPTU::CommPTUState getPtu_state() const
		{
			return DomainPTU::CommPTUState(idl_CommMobilePTUState.ptu_state);
		}
		inline void setPtu_state(const DomainPTU::CommPTUState &ptu_state)
		{
			idl_CommMobilePTUState.ptu_state = ptu_state;
		}

		//
		// add your customized interface here
		//

			/**
		 * Set the state of the base.
		 */
		inline void set_base_state(const CommBasicObjects::CommBaseState &baseState) {
			idl_CommMobilePTUState.base_state = baseState;
		}

		/**
		 * Get the state of the base.
		 */
		inline CommBasicObjects::CommBaseState get_base_state() const {
			return idl_CommMobilePTUState.base_state;
		}

		/**
		 * Set the state of the PTU.
		 */
		inline void set_ptu_state(const CommPTUState &manipState) {
			idl_CommMobilePTUState.ptu_state = manipState;
		}

		/**
		 * Get the state of the PTU.
		 */
		inline CommPTUState get_ptu_state() const {
			return 	idl_CommMobilePTUState.ptu_state;
		}

		/**
		 * Set if the state is valid.
		 */
		inline void set_valid(bool valid) {
			idl_CommMobilePTUState.ptu_state.is_valid = valid;
		}

		/**
		 * Get if the state is valid.
		 */
		inline bool is_valid() const {
			return idl_CommMobilePTUState.ptu_state.is_valid;
		}

		/**
		 * Print the object to an output stream.
		 * @param os Output stream to which should be printed
		 */
		void print(std::ostream &os = std::cout) const;
};

inline std::ostream &operator<<(std::ostream &os, const CommMobilePTUState &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace DomainPTU */
#endif /* DOMAINPTU_COMMMOBILEPTUSTATE_H_ */
