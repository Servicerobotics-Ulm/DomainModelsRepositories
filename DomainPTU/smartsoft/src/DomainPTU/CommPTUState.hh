//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2018 Servicerobotik Ulm
//
//  Service Robotics Research Center
//  University of Applied Sciences Ulm
//  Prittwitzstr. 10
//  89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------



#ifndef DOMAINPTU_COMMPTUSTATE_H_
#define DOMAINPTU_COMMPTUSTATE_H_

#include "DomainPTU/CommPTUStateCore.hh"

namespace DomainPTU {
		
class CommPTUState : public CommPTUStateCore {
	public:
		// default constructors
		CommPTUState();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommPTUState(const double &pan, const double &tilt, const CommBasicObjects::CommPose3d &pose_PTU, const bool &is_valid);
		
		CommPTUState(const CommPTUStateCore &commPTUState);
		CommPTUState(const DATATYPE &commPTUState);
		virtual ~CommPTUState();
		
		// use framework specific getter and setter methods from core (base) class
		using CommPTUStateCore::get;
		using CommPTUStateCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline bool getIs_valid() const
		{
			return idl_CommPTUState.is_valid;
		}
		inline void setIs_valid(const bool &is_valid)
		{
			idl_CommPTUState.is_valid = is_valid;
		}

		inline double getPan() const
		{
			return idl_CommPTUState.pan;
		}
		inline void setPan(const double &pan)
		{
			idl_CommPTUState.pan = pan;
		}

		inline CommBasicObjects::CommPose3d getPose_PTU() const
		{
			return CommBasicObjects::CommPose3d(idl_CommPTUState.pose_PTU);
		}
		inline void setPose_PTU(const CommBasicObjects::CommPose3d &pose_PTU)
		{
			idl_CommPTUState.pose_PTU = pose_PTU;
		}

		inline double getTilt() const
		{
			return idl_CommPTUState.tilt;
		}
		inline void setTilt(const double &tilt)
		{
			idl_CommPTUState.tilt = tilt;
		}

		//
		// add your customized interface here
		//


		/**
		 * Set angle of a joint.
		 * @param joint Index of the joint
		 * @param angle Anlge for the joint [rad]
		 */
		inline void set_pan_angle(const double angle) {
			idl_CommPTUState.pan = angle;
		}

		/**
		 * Return the angle for a joint.
		 * @param joint Index of the joint
		 * @return Angle for the joint [rad]
		 */
		inline double get_pan_angle() const {
			return idl_CommPTUState.pan;
		}

		/**
		 * Set angle of a joint.
		 * @param joint Index of the joint
		 * @param angle Anlge for the joint [rad]
		 */
		inline void set_tilt_angle(const double angle) {
			idl_CommPTUState.tilt = angle;
		}

		/**
		 * Return the angle for a joint.
		 * @param joint Index of the joint
		 * @return Angle for the joint [rad]
		 */
		inline double get_tilt_angle() const {
			return idl_CommPTUState.tilt;
		}


		/**
		 * Set the pose of the ptu coordinate system relative
		 * to the robot coordinate system.
		 */
		inline void set_pose_ptu(const double x, const double y, const double z, const double azimuth,
				const double elevation, const double roll, const double unit = 0.001) {
			idl_CommPTUState.pose_PTU.position.x = x * unit * 1000;
			idl_CommPTUState.pose_PTU.position.y = y * unit * 1000;
			idl_CommPTUState.pose_PTU.position.z = z * unit * 1000;

			idl_CommPTUState.pose_PTU.orientation.azimuth = azimuth;
			idl_CommPTUState.pose_PTU.orientation.elevation = elevation;
			idl_CommPTUState.pose_PTU.orientation.roll = roll;
		}

		/**
		 * Returns the pose of the ptu coordinate system
		 * relative to the robot coordinate system. The position is
		 * specified in the given unit value (0.001 = mm)
		 */
		inline void get_pose_ptu(double& x, double& y, double& z, double& azimuth, double& elevation, double& roll,
				const double unit = 0.001) const {
			x = idl_CommPTUState.pose_PTU.position.x * 0.001 / unit;
			y = idl_CommPTUState.pose_PTU.position.y * 0.001 / unit;
			z = idl_CommPTUState.pose_PTU.position.z * 0.001 / unit;

			azimuth = idl_CommPTUState.pose_PTU.orientation.azimuth;
			elevation = idl_CommPTUState.pose_PTU.orientation.elevation;
			roll = idl_CommPTUState.pose_PTU.orientation.roll;
		}

		/**
		 * Set the state to valid or invalid.
		 * @param valid
		 * 			true	: state is valid
		 * 			false	: state is invalid
		 */
		inline void set_valid(const bool valid) {
			idl_CommPTUState.is_valid = valid;
		}

		/**
		 * Check if the state is valid.
		 * @return
		 * 			true	: state is valid
		 * 			false	: state is invalid
		 */
		inline bool is_valid() const {
			return idl_CommPTUState.is_valid;
		}

		/**
		 * Print the object to an output stream.
		 * @param os Output stream to which should be printed
		 */
		void print(std::ostream &os = std::cout) const;
};

inline std::ostream &operator<<(std::ostream &os, const CommPTUState &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace DomainPTU */
#endif /* DOMAINPTU_COMMPTUSTATE_H_ */
