//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "Comm3dPointCloudJSON.hh"

#include "CommBasicObjectsJSON/CommPosition3dJSON.hh"

namespace DomainVisionIDL {

void to_json(const DomainVisionIDL::Comm3dPointCloud& obj, nlohmann::json& j)
{
	// valid: Boolean
	j["valid"] = obj.valid;
	// points: CommPosition3d[]
	for(size_t idx=0; idx < obj.points.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.points.at(idx), array_element);
		j["points"].emplace_back(array_element);
	}
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, DomainVisionIDL::Comm3dPointCloud& obj)
{
	// valid: Boolean
	if(j.contains("valid") && j["valid"].is_boolean()) {
		obj.valid = j["valid"].get<bool>();
	}
	// points: CommPosition3d[]
	if(j.contains("points") && j["points"].is_array()) {
		auto jpoints = j["points"];
		obj.points.resize(jpoints.size());
		for(size_t idx=0; idx < jpoints.size(); idx++) {
			// convert the json array values individually
			if(jpoints.at(idx).is_object()) {
				// from_json(jpoints.at(idx), obj.points.at(idx));
				obj.points[idx] = jpoints[idx].get<CommBasicObjectsIDL::CommPosition3d>();
			}
		}
	}
}

} // end namespace DomainVisionIDL
