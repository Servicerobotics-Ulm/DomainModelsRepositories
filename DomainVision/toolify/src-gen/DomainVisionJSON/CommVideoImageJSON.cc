//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommVideoImageJSON.hh"

#include "DomainVisionJSON/ImageParametersJSON.hh"
#include "CommBasicObjectsJSON/CommPose3dJSON.hh"
#include "CommBasicObjectsJSON/CommBaseStateJSON.hh"
#include <DomainVision/enumImageDistortionModel.hh>

namespace DomainVisionIDL {

void to_json(const DomainVisionIDL::CommVideoImage& obj, nlohmann::json& j)
{
	// parameter: ImageParameters
	to_json(obj.parameter, j["parameter"]);
	// data: UInt8[]
	j["data"] = obj.data;
	// sensor_pose: CommPose3d
	to_json(obj.sensor_pose, j["sensor_pose"]);
	// base_state: CommBaseState
	to_json(obj.base_state, j["base_state"]);
	// is_valid: Boolean
	j["is_valid"] = obj.is_valid;
	// seq_count: UInt32
	j["seq_count"] = obj.seq_count;
	// intrinsic_m: Double[]
	j["intrinsic_m"] = obj.intrinsic_m;
	// distortion_m: Double[]
	j["distortion_m"] = obj.distortion_m;
	// distortion_model: ImageDistortionModel
	j["distortion_model"] = DomainVision::ImageDistortionModel(obj.distortion_model).to_string(false);
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, DomainVisionIDL::CommVideoImage& obj)
{
	// parameter: ImageParameters
	if(j.contains("parameter") && j["parameter"].is_object()) {
		//from_json(j["parameter"], obj.parameter);
		obj.parameter = j["parameter"].get<DomainVisionIDL::ImageParameters>();
	}
	// data: UInt8[]
	if(j.contains("data") && j["data"].is_array()) {
		obj.data = j["data"].get<std::vector<unsigned char>>();
	}
	// sensor_pose: CommPose3d
	if(j.contains("sensor_pose") && j["sensor_pose"].is_object()) {
		//from_json(j["sensor_pose"], obj.sensor_pose);
		obj.sensor_pose = j["sensor_pose"].get<CommBasicObjectsIDL::CommPose3d>();
	}
	// base_state: CommBaseState
	if(j.contains("base_state") && j["base_state"].is_object()) {
		//from_json(j["base_state"], obj.base_state);
		obj.base_state = j["base_state"].get<CommBasicObjectsIDL::CommBaseState>();
	}
	// is_valid: Boolean
	if(j.contains("is_valid") && j["is_valid"].is_boolean()) {
		obj.is_valid = j["is_valid"].get<bool>();
	}
	// seq_count: UInt32
	if(j.contains("seq_count") && j["seq_count"].is_number_unsigned()) {
		obj.seq_count = j["seq_count"].get<unsigned int>();
	}
	// intrinsic_m: Double[]
	if(j.contains("intrinsic_m") && j["intrinsic_m"].is_array()) {
		obj.intrinsic_m = j["intrinsic_m"].get<std::vector<double>>();
	}
	// distortion_m: Double[]
	if(j.contains("distortion_m") && j["distortion_m"].is_array()) {
		obj.distortion_m = j["distortion_m"].get<std::vector<double>>();
	}
	// distortion_model: ImageDistortionModel
	if(j.contains("distortion_model") && j["distortion_model"].is_string()) {
		obj.distortion_model = DomainVision::ImageDistortionModel::from_string(j["distortion_model"].get<std::string>());
	}
}

} // end namespace DomainVisionIDL
