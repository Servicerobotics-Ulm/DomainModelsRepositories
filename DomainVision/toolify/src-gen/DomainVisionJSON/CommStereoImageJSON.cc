//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommStereoImageJSON.hh"

#include "DomainVisionJSON/CommVideoImageJSON.hh"
#include "DomainVisionJSON/CommVideoImageJSON.hh"
#include "DomainVisionJSON/CommDisparityImageJSON.hh"

namespace DomainVisionIDL {

void to_json(const DomainVisionIDL::CommStereoImage& obj, nlohmann::json& j)
{
	// left: CommVideoImage
	to_json(obj.left, j["left"]);
	// right: CommVideoImage
	to_json(obj.right, j["right"]);
	// hasDispertyMap: Boolean
	j["hasDispertyMap"] = obj.hasDispertyMap;
	// disparityMap: CommDisparityImage
	to_json(obj.disparityMap, j["disparityMap"]);
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, DomainVisionIDL::CommStereoImage& obj)
{
	// left: CommVideoImage
	if(j.contains("left") && j["left"].is_object()) {
		//from_json(j["left"], obj.left);
		obj.left = j["left"].get<DomainVisionIDL::CommVideoImage>();
	}
	// right: CommVideoImage
	if(j.contains("right") && j["right"].is_object()) {
		//from_json(j["right"], obj.right);
		obj.right = j["right"].get<DomainVisionIDL::CommVideoImage>();
	}
	// hasDispertyMap: Boolean
	if(j.contains("hasDispertyMap") && j["hasDispertyMap"].is_boolean()) {
		obj.hasDispertyMap = j["hasDispertyMap"].get<bool>();
	}
	// disparityMap: CommDisparityImage
	if(j.contains("disparityMap") && j["disparityMap"].is_object()) {
		//from_json(j["disparityMap"], obj.disparityMap);
		obj.disparityMap = j["disparityMap"].get<DomainVisionIDL::CommDisparityImage>();
	}
}

} // end namespace DomainVisionIDL
