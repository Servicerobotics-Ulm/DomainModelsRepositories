//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommRGBDImageJSON.hh"

#include "DomainVisionJSON/CommVideoImageJSON.hh"
#include "DomainVisionJSON/CommDepthImageJSON.hh"
#include "CommBasicObjectsJSON/CommBaseStateJSON.hh"
#include "CommBasicObjectsJSON/CommPose3dJSON.hh"

namespace DomainVisionIDL {

void to_json(const DomainVisionIDL::CommRGBDImage& obj, nlohmann::json& j)
{
	// color_image: CommVideoImage
	to_json(obj.color_image, j["color_image"]);
	// depth_image: CommDepthImage
	to_json(obj.depth_image, j["depth_image"]);
	// base_state: CommBaseState
	to_json(obj.base_state, j["base_state"]);
	// sensor_pose: CommPose3d
	to_json(obj.sensor_pose, j["sensor_pose"]);
	// seq_count: UInt32
	j["seq_count"] = obj.seq_count;
	// is_valid: Boolean
	j["is_valid"] = obj.is_valid;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, DomainVisionIDL::CommRGBDImage& obj)
{
	// color_image: CommVideoImage
	if(j.contains("color_image") && j["color_image"].is_object()) {
		//from_json(j["color_image"], obj.color_image);
		obj.color_image = j["color_image"].get<DomainVisionIDL::CommVideoImage>();
	}
	// depth_image: CommDepthImage
	if(j.contains("depth_image") && j["depth_image"].is_object()) {
		//from_json(j["depth_image"], obj.depth_image);
		obj.depth_image = j["depth_image"].get<DomainVisionIDL::CommDepthImage>();
	}
	// base_state: CommBaseState
	if(j.contains("base_state") && j["base_state"].is_object()) {
		//from_json(j["base_state"], obj.base_state);
		obj.base_state = j["base_state"].get<CommBasicObjectsIDL::CommBaseState>();
	}
	// sensor_pose: CommPose3d
	if(j.contains("sensor_pose") && j["sensor_pose"].is_object()) {
		//from_json(j["sensor_pose"], obj.sensor_pose);
		obj.sensor_pose = j["sensor_pose"].get<CommBasicObjectsIDL::CommPose3d>();
	}
	// seq_count: UInt32
	if(j.contains("seq_count") && j["seq_count"].is_number_unsigned()) {
		obj.seq_count = j["seq_count"].get<unsigned int>();
	}
	// is_valid: Boolean
	if(j.contains("is_valid") && j["is_valid"].is_boolean()) {
		obj.is_valid = j["is_valid"].get<bool>();
	}
}

} // end namespace DomainVisionIDL
