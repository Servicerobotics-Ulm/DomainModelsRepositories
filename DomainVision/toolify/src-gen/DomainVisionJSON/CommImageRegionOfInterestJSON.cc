//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommImageRegionOfInterestJSON.hh"


namespace DomainVisionIDL {

void to_json(const DomainVisionIDL::CommImageRegionOfInterest& obj, nlohmann::json& j)
{
	// x_offset: UInt32
	j["x_offset"] = obj.x_offset;
	// y_offset: UInt32
	j["y_offset"] = obj.y_offset;
	// height: UInt32
	j["height"] = obj.height;
	// width: UInt32
	j["width"] = obj.width;
	// do_rectify: Boolean
	j["do_rectify"] = obj.do_rectify;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, DomainVisionIDL::CommImageRegionOfInterest& obj)
{
	// x_offset: UInt32
	if(j.contains("x_offset") && j["x_offset"].is_number_unsigned()) {
		obj.x_offset = j["x_offset"].get<unsigned int>();
	}
	// y_offset: UInt32
	if(j.contains("y_offset") && j["y_offset"].is_number_unsigned()) {
		obj.y_offset = j["y_offset"].get<unsigned int>();
	}
	// height: UInt32
	if(j.contains("height") && j["height"].is_number_unsigned()) {
		obj.height = j["height"].get<unsigned int>();
	}
	// width: UInt32
	if(j.contains("width") && j["width"].is_number_unsigned()) {
		obj.width = j["width"].get<unsigned int>();
	}
	// do_rectify: Boolean
	if(j.contains("do_rectify") && j["do_rectify"].is_boolean()) {
		obj.do_rectify = j["do_rectify"].get<bool>();
	}
}

} // end namespace DomainVisionIDL
