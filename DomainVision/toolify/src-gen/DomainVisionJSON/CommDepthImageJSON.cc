//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommDepthImageJSON.hh"

#include <DomainVision/enumDepthFormatType.hh>
#include <DomainVision/enumImageDistortionModel.hh>

namespace DomainVisionIDL {

void to_json(const DomainVisionIDL::CommDepthImage& obj, nlohmann::json& j)
{
	// width: UInt32
	j["width"] = obj.width;
	// height: UInt32
	j["height"] = obj.height;
	// format: DepthFormatType
	j["format"] = DomainVision::DepthFormatType(obj.format).to_string(false);
	// pixel_size: UInt32
	j["pixel_size"] = obj.pixel_size;
	// min_distcance: Double
	j["min_distcance"] = obj.min_distcance;
	// max_distcance: Double
	j["max_distcance"] = obj.max_distcance;
	// data: UInt8[]
	j["data"] = obj.data;
	// intrinsic_m: Double[]
	j["intrinsic_m"] = obj.intrinsic_m;
	// extrinsic_m: Double[]
	j["extrinsic_m"] = obj.extrinsic_m;
	// stereo_m: Double[]
	j["stereo_m"] = obj.stereo_m;
	// distortion_m: Double[]
	j["distortion_m"] = obj.distortion_m;
	// distortion_model: ImageDistortionModel
	j["distortion_model"] = DomainVision::ImageDistortionModel(obj.distortion_model).to_string(false);
	// seq_count: UInt32
	j["seq_count"] = obj.seq_count;
	// is_valid: Boolean
	j["is_valid"] = obj.is_valid;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, DomainVisionIDL::CommDepthImage& obj)
{
	// width: UInt32
	if(j.contains("width") && j["width"].is_number_unsigned()) {
		obj.width = j["width"].get<unsigned int>();
	}
	// height: UInt32
	if(j.contains("height") && j["height"].is_number_unsigned()) {
		obj.height = j["height"].get<unsigned int>();
	}
	// format: DepthFormatType
	if(j.contains("format") && j["format"].is_string()) {
		obj.format = DomainVision::DepthFormatType::from_string(j["format"].get<std::string>());
	}
	// pixel_size: UInt32
	if(j.contains("pixel_size") && j["pixel_size"].is_number_unsigned()) {
		obj.pixel_size = j["pixel_size"].get<unsigned int>();
	}
	// min_distcance: Double
	if(j.contains("min_distcance") && j["min_distcance"].is_number_float()) {
		obj.min_distcance = j["min_distcance"].get<double>();
	}
	// max_distcance: Double
	if(j.contains("max_distcance") && j["max_distcance"].is_number_float()) {
		obj.max_distcance = j["max_distcance"].get<double>();
	}
	// data: UInt8[]
	if(j.contains("data") && j["data"].is_array()) {
		obj.data = j["data"].get<std::vector<unsigned char>>();
	}
	// intrinsic_m: Double[]
	if(j.contains("intrinsic_m") && j["intrinsic_m"].is_array()) {
		obj.intrinsic_m = j["intrinsic_m"].get<std::vector<double>>();
	}
	// extrinsic_m: Double[]
	if(j.contains("extrinsic_m") && j["extrinsic_m"].is_array()) {
		obj.extrinsic_m = j["extrinsic_m"].get<std::vector<double>>();
	}
	// stereo_m: Double[]
	if(j.contains("stereo_m") && j["stereo_m"].is_array()) {
		obj.stereo_m = j["stereo_m"].get<std::vector<double>>();
	}
	// distortion_m: Double[]
	if(j.contains("distortion_m") && j["distortion_m"].is_array()) {
		obj.distortion_m = j["distortion_m"].get<std::vector<double>>();
	}
	// distortion_model: ImageDistortionModel
	if(j.contains("distortion_model") && j["distortion_model"].is_string()) {
		obj.distortion_model = DomainVision::ImageDistortionModel::from_string(j["distortion_model"].get<std::string>());
	}
	// seq_count: UInt32
	if(j.contains("seq_count") && j["seq_count"].is_number_unsigned()) {
		obj.seq_count = j["seq_count"].get<unsigned int>();
	}
	// is_valid: Boolean
	if(j.contains("is_valid") && j["is_valid"].is_boolean()) {
		obj.is_valid = j["is_valid"].get<bool>();
	}
}

} // end namespace DomainVisionIDL
