//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINVISION_COMMSTEREOIMAGE_CORE_H_
#define DOMAINVISION_COMMSTEREOIMAGE_CORE_H_

#include "DomainVision/CommStereoImageData.hh"
#include "DomainVision/CommVideoImage.hh"
#include "DomainVision/CommDisparityImage.hh"

#include <iostream>
#include <string>
#include <list>

namespace DomainVision {
	
class CommStereoImageCore {
protected:
	// data structure
	DomainVisionIDL::CommStereoImage idl_CommStereoImage;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef DomainVisionIDL::CommStereoImage DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommStereoImageCore();
	CommStereoImageCore(const DATATYPE &data);
	// default destructor
	virtual ~CommStereoImageCore();
	
	const DATATYPE& get() const { return idl_CommStereoImage; }
	operator const DATATYPE&() const { return idl_CommStereoImage; }
	DATATYPE& set() { return idl_CommStereoImage; }

	static inline std::string identifier(void) { return "DomainVision::CommStereoImage"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Left
	inline DomainVision::CommVideoImage getLeft() const { return DomainVision::CommVideoImage(idl_CommStereoImage.left); }
	inline CommStereoImageCore& setLeft(const DomainVision::CommVideoImage &left) { idl_CommStereoImage.left = left; return *this; }
	
	// getter and setter for element Right
	inline DomainVision::CommVideoImage getRight() const { return DomainVision::CommVideoImage(idl_CommStereoImage.right); }
	inline CommStereoImageCore& setRight(const DomainVision::CommVideoImage &right) { idl_CommStereoImage.right = right; return *this; }
	
	// getter and setter for element HasDispertyMap
	inline bool getHasDispertyMap() const { return idl_CommStereoImage.hasDispertyMap; }
	inline CommStereoImageCore& setHasDispertyMap(const bool &hasDispertyMap) { idl_CommStereoImage.hasDispertyMap = hasDispertyMap; return *this; }
	
	// getter and setter for element DisparityMap
	inline DomainVision::CommDisparityImage getDisparityMap() const { return DomainVision::CommDisparityImage(idl_CommStereoImage.disparityMap); }
	inline CommStereoImageCore& setDisparityMap(const DomainVision::CommDisparityImage &disparityMap) { idl_CommStereoImage.disparityMap = disparityMap; return *this; }
};

} /* namespace DomainVision */
#endif /* DOMAINVISION_COMMSTEREOIMAGE_CORE_H_ */
