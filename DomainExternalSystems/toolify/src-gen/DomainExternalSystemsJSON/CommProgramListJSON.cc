//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommProgramListJSON.hh"

#include "DomainExternalSystemsJSON/CommExternalProgramJSON.hh"

namespace DomainExternalSystemsIDL {

void to_json(const DomainExternalSystemsIDL::CommProgramList& obj, nlohmann::json& j)
{
	// programs: CommExternalProgram[]
	for(size_t idx=0; idx < obj.programs.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.programs.at(idx), array_element);
		j["programs"].emplace_back(array_element);
	}
	// isValid: Boolean
	j["isValid"] = obj.isValid;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, DomainExternalSystemsIDL::CommProgramList& obj)
{
	// programs: CommExternalProgram[]
	if(j.contains("programs") && j["programs"].is_array()) {
		auto jprograms = j["programs"];
		obj.programs.resize(jprograms.size());
		for(size_t idx=0; idx < jprograms.size(); idx++) {
			// convert the json array values individually
			if(jprograms.at(idx).is_object()) {
				// from_json(jprograms.at(idx), obj.programs.at(idx));
				obj.programs[idx] = jprograms[idx].get<DomainExternalSystemsIDL::CommExternalProgram>();
			}
		}
	}
	// isValid: Boolean
	if(j.contains("isValid") && j["isValid"].is_boolean()) {
		obj.isValid = j["isValid"].get<bool>();
	}
}

} // end namespace DomainExternalSystemsIDL
