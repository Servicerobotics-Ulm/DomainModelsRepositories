//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommExternalProgramJSON.hh"

#include "DomainExternalSystemsJSON/CommExternalProgramArgumentJSON.hh"
#include "DomainExternalSystemsJSON/CommExternalProgramArgumentJSON.hh"

namespace DomainExternalSystemsIDL {

void to_json(const DomainExternalSystemsIDL::CommExternalProgram& obj, nlohmann::json& j)
{
	// name: String
	j["name"] = obj.name;
	// description: String
	j["description"] = obj.description;
	// isExecutable: Boolean
	j["isExecutable"] = obj.isExecutable;
	// arguments: CommExternalProgramArgument[]
	for(size_t idx=0; idx < obj.arguments.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.arguments.at(idx), array_element);
		j["arguments"].emplace_back(array_element);
	}
	// resultArgs: CommExternalProgramArgument[]
	for(size_t idx=0; idx < obj.resultArgs.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.resultArgs.at(idx), array_element);
		j["resultArgs"].emplace_back(array_element);
	}
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, DomainExternalSystemsIDL::CommExternalProgram& obj)
{
	// name: String
	if(j.contains("name") && j["name"].is_string()) {
		obj.name = j["name"].get<std::string>();
	}
	// description: String
	if(j.contains("description") && j["description"].is_string()) {
		obj.description = j["description"].get<std::string>();
	}
	// isExecutable: Boolean
	if(j.contains("isExecutable") && j["isExecutable"].is_boolean()) {
		obj.isExecutable = j["isExecutable"].get<bool>();
	}
	// arguments: CommExternalProgramArgument[]
	if(j.contains("arguments") && j["arguments"].is_array()) {
		auto jarguments = j["arguments"];
		obj.arguments.resize(jarguments.size());
		for(size_t idx=0; idx < jarguments.size(); idx++) {
			// convert the json array values individually
			if(jarguments.at(idx).is_object()) {
				// from_json(jarguments.at(idx), obj.arguments.at(idx));
				obj.arguments[idx] = jarguments[idx].get<DomainExternalSystemsIDL::CommExternalProgramArgument>();
			}
		}
	}
	// resultArgs: CommExternalProgramArgument[]
	if(j.contains("resultArgs") && j["resultArgs"].is_array()) {
		auto jresultArgs = j["resultArgs"];
		obj.resultArgs.resize(jresultArgs.size());
		for(size_t idx=0; idx < jresultArgs.size(); idx++) {
			// convert the json array values individually
			if(jresultArgs.at(idx).is_object()) {
				// from_json(jresultArgs.at(idx), obj.resultArgs.at(idx));
				obj.resultArgs[idx] = jresultArgs[idx].get<DomainExternalSystemsIDL::CommExternalProgramArgument>();
			}
		}
	}
}

} // end namespace DomainExternalSystemsIDL
