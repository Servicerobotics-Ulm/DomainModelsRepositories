//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINEXTERNALSYSTEMS_COMMEXTERNALPROGRAMRESPONSE_CORE_H_
#define DOMAINEXTERNALSYSTEMS_COMMEXTERNALPROGRAMRESPONSE_CORE_H_

#include "DomainExternalSystems/CommExternalProgramResponseData.hh"
#include "DomainExternalSystems/enumExternalProgramResult.hh"
#include "DomainExternalSystems/enumExternalProgramStatus.hh"
#include "DomainExternalSystems/CommExternalProgramArgument.hh"

#include <iostream>
#include <string>
#include <list>

namespace DomainExternalSystems {
	
class CommExternalProgramResponseCore {
protected:
	// data structure
	DomainExternalSystemsIDL::CommExternalProgramResponse idl_CommExternalProgramResponse;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef DomainExternalSystemsIDL::CommExternalProgramResponse DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommExternalProgramResponseCore();
	CommExternalProgramResponseCore(const DATATYPE &data);
	// default destructor
	virtual ~CommExternalProgramResponseCore();
	
	const DATATYPE& get() const { return idl_CommExternalProgramResponse; }
	operator const DATATYPE&() const { return idl_CommExternalProgramResponse; }
	DATATYPE& set() { return idl_CommExternalProgramResponse; }

	static inline std::string identifier(void) { return "DomainExternalSystems::CommExternalProgramResponse"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Status
	inline DomainExternalSystems::ExternalProgramStatus getStatus() const { return DomainExternalSystems::ExternalProgramStatus(idl_CommExternalProgramResponse.status); }
	inline CommExternalProgramResponseCore& setStatus(const DomainExternalSystems::ExternalProgramStatus &status) { idl_CommExternalProgramResponse.status = status; return *this; }
	
	// getter and setter for element Result
	inline DomainExternalSystems::ExternalProgramResult getResult() const { return DomainExternalSystems::ExternalProgramResult(idl_CommExternalProgramResponse.result); }
	inline CommExternalProgramResponseCore& setResult(const DomainExternalSystems::ExternalProgramResult &result) { idl_CommExternalProgramResponse.result = result; return *this; }
	
	// getter and setter for element ResultArgs
	/**
	 * Getter methods for element idl_CommExternalProgramResponse.resultArgs of type vector<DomainExternalSystems::CommExternalProgramArgument>
	 */
	inline std::vector<DomainExternalSystems::CommExternalProgramArgument> getResultArgsCopy() const { 
		return std::vector<DomainExternalSystems::CommExternalProgramArgument>(idl_CommExternalProgramResponse.resultArgs.begin(), idl_CommExternalProgramResponse.resultArgs.end());
	}
	inline DomainExternalSystems::CommExternalProgramArgument getResultArgsElemAtPos(const size_t &pos) const {
		return DomainExternalSystems::CommExternalProgramArgument(idl_CommExternalProgramResponse.resultArgs[pos]);
	}
	inline size_t getResultArgsSize() const { return idl_CommExternalProgramResponse.resultArgs.size(); }
	inline bool isResultArgsEmpty() const { return idl_CommExternalProgramResponse.resultArgs.empty(); }
	/**
	 * Setter methods for idl_CommExternalProgramResponse.resultArgs of type vector<DomainExternalSystems::CommExternalProgramArgument>
	 */
	inline CommExternalProgramResponseCore& setResultArgs(const std::vector<DomainExternalSystems::CommExternalProgramArgument> &resultArgs) { 
		idl_CommExternalProgramResponse.resultArgs.assign(resultArgs.begin(), resultArgs.end());
		return *this;
	}
	inline bool setResultArgsElemAtPos(const size_t &pos, const DomainExternalSystems::CommExternalProgramArgument &elem) {
		if(pos < idl_CommExternalProgramResponse.resultArgs.size()) {
			idl_CommExternalProgramResponse.resultArgs[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertResultArgsVectorAtPos(const size_t &pos, const std::vector<DomainExternalSystems::CommExternalProgramArgument> &data) {
		if(pos < idl_CommExternalProgramResponse.resultArgs.size()) {
			idl_CommExternalProgramResponse.resultArgs.insert(idl_CommExternalProgramResponse.resultArgs.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeResultArgs(const size_t &size) { idl_CommExternalProgramResponse.resultArgs.resize(size); }
	inline bool eraseResultArgsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommExternalProgramResponse.resultArgs.size() ) {
			idl_CommExternalProgramResponse.resultArgs.erase(idl_CommExternalProgramResponse.resultArgs.begin()+pos, idl_CommExternalProgramResponse.resultArgs.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearResultArgs() { idl_CommExternalProgramResponse.resultArgs.clear(); }
};

} /* namespace DomainExternalSystems */
#endif /* DOMAINEXTERNALSYSTEMS_COMMEXTERNALPROGRAMRESPONSE_CORE_H_ */
