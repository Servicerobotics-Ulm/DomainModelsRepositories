//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINEXTERNALSYSTEMS_EXTERNALPROGRAMSTATUS_ENUM_H_
#define DOMAINEXTERNALSYSTEMS_EXTERNALPROGRAMSTATUS_ENUM_H_

#include <DomainExternalSystems/enumExternalProgramStatusData.hh>

#include <string>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

namespace DomainExternalSystems {
	
	class ExternalProgramStatus {
	private:
		DomainExternalSystemsIDL::ExternalProgramStatus value;
		
	public:
		enum ENUM_ExternalProgramStatus {
			ENUM_VALUE_UNDEFINED = 0,
			UNKOWN = 1,
			NOTRUNNING = 2,
			RUNNING = 3,
			ABORTED = 4,
			FINSHED = 5,
			PAUSED = 6
		};
		
		// default constructor
		ExternalProgramStatus() { 
			value = ENUM_VALUE_UNDEFINED;
		}
		
		// copy constructor for enum type
		ExternalProgramStatus(ENUM_ExternalProgramStatus e) {
			value = static_cast<int>(e);
		}
		
		// copy constructor for IDL type
		ExternalProgramStatus(DomainExternalSystemsIDL::ExternalProgramStatus e) {
			value = e;
		}
		
		//const DomainExternalSystemsIDL::ExternalProgramStatus& get() const { return value; }
		
		// ENUM operator
		operator ENUM_ExternalProgramStatus() const {
			return static_cast<ENUM_ExternalProgramStatus>(value);
		}
		
		// compare operator
		bool operator == (const ENUM_ExternalProgramStatus t) const {
			return this->value == t;
		}
		
		std::string to_string() const {
			std::string result = "";
			switch (value) {
				case UNKOWN:
					result = "ExternalProgramStatus::UNKOWN";
					break;
				case NOTRUNNING:
					result = "ExternalProgramStatus::NOTRUNNING";
					break;
				case RUNNING:
					result = "ExternalProgramStatus::RUNNING";
					break;
				case ABORTED:
					result = "ExternalProgramStatus::ABORTED";
					break;
				case FINSHED:
					result = "ExternalProgramStatus::FINSHED";
					break;
				case PAUSED:
					result = "ExternalProgramStatus::PAUSED";
					break;
				default:
					result = "ENUM_VALUE_UNDEFINED";
					break;
			};
			return result;
		}
		
		// helper method to easily implement output stream
		void to_ostream(std::ostream &os = std::cout) const {
			os << to_string();
		}
		
		// convert to xml stream
		void to_xml(std::ostream &os, const std::string &indent = "") const {
			os << indent << "<value>" << value << "</value>";
		}
		
		// restore from xml stream
		void from_xml(std::istream &is) {
			static const Smart::KnuthMorrisPratt kmp_value("<value>");
			if(kmp_value.search(is)) {
				is >> value;
			}
		}
	
	};
	
	inline std::ostream &operator<<(std::ostream &os, const ExternalProgramStatus &e)
	{
		e.to_ostream(os);
		return os;
	}
};

#endif
