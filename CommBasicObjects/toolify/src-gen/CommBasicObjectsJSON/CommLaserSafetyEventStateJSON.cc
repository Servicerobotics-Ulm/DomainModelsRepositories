//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommLaserSafetyEventStateJSON.hh"

#include <CommBasicObjects/enumSafetyFieldState.hh>
#include <CommBasicObjects/enumSafetyFieldState.hh>

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommLaserSafetyEventState& obj, nlohmann::json& j)
{
	// protectiveState: SafetyFieldState
	j["protectiveState"] = CommBasicObjects::SafetyFieldState(obj.protectiveState).to_string(false);
	// warningState: SafetyFieldState
	j["warningState"] = CommBasicObjects::SafetyFieldState(obj.warningState).to_string(false);
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommLaserSafetyEventState& obj)
{
	// protectiveState: SafetyFieldState
	if(j.contains("protectiveState") && j["protectiveState"].is_string()) {
		obj.protectiveState = CommBasicObjects::SafetyFieldState::from_string(j["protectiveState"].get<std::string>());
	}
	// warningState: SafetyFieldState
	if(j.contains("warningState") && j["warningState"].is_string()) {
		obj.warningState = CommBasicObjects::SafetyFieldState::from_string(j["warningState"].get<std::string>());
	}
}

} // end namespace CommBasicObjectsIDL
