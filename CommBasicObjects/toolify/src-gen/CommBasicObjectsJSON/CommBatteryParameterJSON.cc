//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommBatteryParameterJSON.hh"

#include <CommBasicObjects/enumComparisonState.hh>
#include <CommBasicObjects/enumComparisonState.hh>

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommBatteryParameter& obj, nlohmann::json& j)
{
	// upperThreshold: Double
	j["upperThreshold"] = obj.upperThreshold;
	// lowerThreshold: Double
	j["lowerThreshold"] = obj.lowerThreshold;
	// desiredState: ComparisonState
	j["desiredState"] = CommBasicObjects::ComparisonState(obj.desiredState).to_string(false);
	// currentState: ComparisonState
	j["currentState"] = CommBasicObjects::ComparisonState(obj.currentState).to_string(false);
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommBatteryParameter& obj)
{
	// upperThreshold: Double
	if(j.contains("upperThreshold") && j["upperThreshold"].is_number_float()) {
		obj.upperThreshold = j["upperThreshold"].get<double>();
	}
	// lowerThreshold: Double
	if(j.contains("lowerThreshold") && j["lowerThreshold"].is_number_float()) {
		obj.lowerThreshold = j["lowerThreshold"].get<double>();
	}
	// desiredState: ComparisonState
	if(j.contains("desiredState") && j["desiredState"].is_string()) {
		obj.desiredState = CommBasicObjects::ComparisonState::from_string(j["desiredState"].get<std::string>());
	}
	// currentState: ComparisonState
	if(j.contains("currentState") && j["currentState"].is_string()) {
		obj.currentState = CommBasicObjects::ComparisonState::from_string(j["currentState"].get<std::string>());
	}
}

} // end namespace CommBasicObjectsIDL
