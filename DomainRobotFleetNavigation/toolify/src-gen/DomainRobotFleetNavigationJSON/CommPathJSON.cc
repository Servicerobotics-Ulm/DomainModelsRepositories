//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommPathJSON.hh"

#include "DomainRobotFleetNavigationJSON/CommNodeJSON.hh"

namespace DomainRobotFleetNavigationIDL {

void to_json(const DomainRobotFleetNavigationIDL::CommPath& obj, nlohmann::json& j)
{
	// id: Int32
	j["id"] = obj.id;
	// direction: Int32
	j["direction"] = obj.direction;
	// width: Double
	j["width"] = obj.width;
	// node: CommNode[]
	for(size_t idx=0; idx < obj.node.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.node.at(idx), array_element);
		j["node"].emplace_back(array_element);
	}
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, DomainRobotFleetNavigationIDL::CommPath& obj)
{
	// id: Int32
	if(j.contains("id") && j["id"].is_number_integer()) {
		obj.id = j["id"].get<int>();
	}
	// direction: Int32
	if(j.contains("direction") && j["direction"].is_number_integer()) {
		obj.direction = j["direction"].get<int>();
	}
	// width: Double
	if(j.contains("width") && j["width"].is_number_float()) {
		obj.width = j["width"].get<double>();
	}
	// node: CommNode[]
	if(j.contains("node") && j["node"].is_array()) {
		auto jnode = j["node"];
		obj.node.resize(jnode.size());
		for(size_t idx=0; idx < jnode.size(); idx++) {
			// convert the json array values individually
			if(jnode.at(idx).is_object()) {
				// from_json(jnode.at(idx), obj.node.at(idx));
				obj.node[idx] = jnode[idx].get<DomainRobotFleetNavigationIDL::CommNode>();
			}
		}
	}
}

} // end namespace DomainRobotFleetNavigationIDL
