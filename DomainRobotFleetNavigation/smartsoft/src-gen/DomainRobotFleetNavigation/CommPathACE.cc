//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "DomainRobotFleetNavigation/CommPathACE.hh"
#include <ace/SString.h>
#include "DomainRobotFleetNavigation/CommNodeACE.hh"

// serialization operator for element CommPath
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const DomainRobotFleetNavigationIDL::CommPath &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element id
	good_bit = good_bit && cdr.write_long(data.id);
	// serialize list-element direction
	good_bit = good_bit && cdr.write_long(data.direction);
	// serialize list-element width
	good_bit = good_bit && cdr.write_double(data.width);
	// serialize list-element node
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.node.size());
	std::vector<DomainRobotFleetNavigationIDL::CommNode>::const_iterator data_nodeIt;
	for(data_nodeIt=data.node.begin(); data_nodeIt!=data.node.end(); data_nodeIt++) {
		good_bit = good_bit && cdr << *data_nodeIt;
	}
	
	return good_bit;
}

// de-serialization operator for element CommPath
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, DomainRobotFleetNavigationIDL::CommPath &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element id
	good_bit = good_bit && cdr.read_long(data.id);
	// deserialize type element direction
	good_bit = good_bit && cdr.read_long(data.direction);
	// deserialize type element width
	good_bit = good_bit && cdr.read_double(data.width);
	// deserialize list-type element node
	ACE_CDR::ULong data_nodeNbr;
	good_bit = good_bit && cdr >> data_nodeNbr;
	data.node.clear();
	DomainRobotFleetNavigationIDL::CommNode data_nodeItem;
	for(ACE_CDR::ULong i=0; i<data_nodeNbr; ++i) {
		good_bit = good_bit && cdr >> data_nodeItem;
		data.node.push_back(data_nodeItem);
	}
	
	return good_bit;
}

// serialization operator for CommunicationObject CommPath
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const DomainRobotFleetNavigation::CommPath &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommPath
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, DomainRobotFleetNavigation::CommPath &obj)
{
	return cdr >> obj.set();
}
