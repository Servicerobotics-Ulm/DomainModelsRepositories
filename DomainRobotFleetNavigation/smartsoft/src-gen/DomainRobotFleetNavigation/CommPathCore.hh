//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINROBOTFLEETNAVIGATION_COMMPATH_CORE_H_
#define DOMAINROBOTFLEETNAVIGATION_COMMPATH_CORE_H_

#include "DomainRobotFleetNavigation/CommPathData.hh"
#include "DomainRobotFleetNavigation/CommNode.hh"

#include <iostream>
#include <string>
#include <list>

namespace DomainRobotFleetNavigation {
	
class CommPathCore {
protected:
	// data structure
	DomainRobotFleetNavigationIDL::CommPath idl_CommPath;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef DomainRobotFleetNavigationIDL::CommPath DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommPathCore();
	CommPathCore(const DATATYPE &data);
	// default destructor
	virtual ~CommPathCore();
	
	const DATATYPE& get() const { return idl_CommPath; }
	operator const DATATYPE&() const { return idl_CommPath; }
	DATATYPE& set() { return idl_CommPath; }

	static inline std::string identifier(void) { return "DomainRobotFleetNavigation::CommPath"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Id
	inline int getId() const { return idl_CommPath.id; }
	inline CommPathCore& setId(const int &id) { idl_CommPath.id = id; return *this; }
	
	// getter and setter for element Direction
	inline int getDirection() const { return idl_CommPath.direction; }
	inline CommPathCore& setDirection(const int &direction) { idl_CommPath.direction = direction; return *this; }
	
	// getter and setter for element Width
	inline double getWidth() const { return idl_CommPath.width; }
	inline CommPathCore& setWidth(const double &width) { idl_CommPath.width = width; return *this; }
	
	// getter and setter for element Node
	/**
	 * Getter methods for element idl_CommPath.node of type vector<DomainRobotFleetNavigation::CommNode>
	 */
	inline std::vector<DomainRobotFleetNavigation::CommNode> getNodeCopy() const { 
		return std::vector<DomainRobotFleetNavigation::CommNode>(idl_CommPath.node.begin(), idl_CommPath.node.end());
	}
	inline DomainRobotFleetNavigation::CommNode getNodeElemAtPos(const size_t &pos) const {
		return DomainRobotFleetNavigation::CommNode(idl_CommPath.node[pos]);
	}
	inline size_t getNodeSize() const { return idl_CommPath.node.size(); }
	inline bool isNodeEmpty() const { return idl_CommPath.node.empty(); }
	/**
	 * Setter methods for idl_CommPath.node of type vector<DomainRobotFleetNavigation::CommNode>
	 */
	inline CommPathCore& setNode(const std::vector<DomainRobotFleetNavigation::CommNode> &node) { 
		idl_CommPath.node.assign(node.begin(), node.end());
		return *this;
	}
	inline bool setNodeElemAtPos(const size_t &pos, const DomainRobotFleetNavigation::CommNode &elem) {
		if(pos < idl_CommPath.node.size()) {
			idl_CommPath.node[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertNodeVectorAtPos(const size_t &pos, const std::vector<DomainRobotFleetNavigation::CommNode> &data) {
		if(pos < idl_CommPath.node.size()) {
			idl_CommPath.node.insert(idl_CommPath.node.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeNode(const size_t &size) { idl_CommPath.node.resize(size); }
	inline bool eraseNodeElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommPath.node.size() ) {
			idl_CommPath.node.erase(idl_CommPath.node.begin()+pos, idl_CommPath.node.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearNode() { idl_CommPath.node.clear(); }
};

} /* namespace DomainRobotFleetNavigation */
#endif /* DOMAINROBOTFLEETNAVIGATION_COMMPATH_CORE_H_ */
