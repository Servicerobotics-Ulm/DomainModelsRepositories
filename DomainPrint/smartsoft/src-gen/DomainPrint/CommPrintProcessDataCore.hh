//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINPRINT_COMMPRINTPROCESSDATA_CORE_H_
#define DOMAINPRINT_COMMPRINTPROCESSDATA_CORE_H_

#include "DomainPrint/CommPrintProcessDataData.hh"
#include "DomainPrint/CommKeyValue.hh"
#include "DomainPrint/enumApplicationModeTypeEnum.hh"

#include <iostream>
#include <string>
#include <list>

namespace DomainPrint {
	
class CommPrintProcessDataCore {
protected:
	// data structure
	DomainPrintIDL::CommPrintProcessData idl_CommPrintProcessData;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef DomainPrintIDL::CommPrintProcessData DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommPrintProcessDataCore();
	CommPrintProcessDataCore(const DATATYPE &data);
	// default destructor
	virtual ~CommPrintProcessDataCore();
	
	const DATATYPE& get() const { return idl_CommPrintProcessData; }
	operator const DATATYPE&() const { return idl_CommPrintProcessData; }
	DATATYPE& set() { return idl_CommPrintProcessData; }

	static inline std::string identifier(void) { return "DomainPrint::CommPrintProcessData"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Data
	/**
	 * Getter methods for element idl_CommPrintProcessData.data of type vector<DomainPrint::CommKeyValue>
	 */
	inline std::vector<DomainPrint::CommKeyValue> getDataCopy() const { 
		return std::vector<DomainPrint::CommKeyValue>(idl_CommPrintProcessData.data.begin(), idl_CommPrintProcessData.data.end());
	}
	inline DomainPrint::CommKeyValue getDataElemAtPos(const size_t &pos) const {
		return DomainPrint::CommKeyValue(idl_CommPrintProcessData.data[pos]);
	}
	inline size_t getDataSize() const { return idl_CommPrintProcessData.data.size(); }
	inline bool isDataEmpty() const { return idl_CommPrintProcessData.data.empty(); }
	/**
	 * Setter methods for idl_CommPrintProcessData.data of type vector<DomainPrint::CommKeyValue>
	 */
	inline CommPrintProcessDataCore& setData(const std::vector<DomainPrint::CommKeyValue> &data) { 
		idl_CommPrintProcessData.data.assign(data.begin(), data.end());
		return *this;
	}
	inline bool setDataElemAtPos(const size_t &pos, const DomainPrint::CommKeyValue &elem) {
		if(pos < idl_CommPrintProcessData.data.size()) {
			idl_CommPrintProcessData.data[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertDataVectorAtPos(const size_t &pos, const std::vector<DomainPrint::CommKeyValue> &data) {
		if(pos < idl_CommPrintProcessData.data.size()) {
			idl_CommPrintProcessData.data.insert(idl_CommPrintProcessData.data.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeData(const size_t &size) { idl_CommPrintProcessData.data.resize(size); }
	inline bool eraseDataElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommPrintProcessData.data.size() ) {
			idl_CommPrintProcessData.data.erase(idl_CommPrintProcessData.data.begin()+pos, idl_CommPrintProcessData.data.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearData() { idl_CommPrintProcessData.data.clear(); }
	
	// getter and setter for element TemplateID
	inline std::string getTemplateID() const { return idl_CommPrintProcessData.templateID; }
	inline CommPrintProcessDataCore& setTemplateID(const std::string &templateID) { idl_CommPrintProcessData.templateID = templateID; return *this; }
	
	// getter and setter for element ApplicationMode
	inline DomainPrint::ApplicationModeTypeEnum getApplicationMode() const { return DomainPrint::ApplicationModeTypeEnum(idl_CommPrintProcessData.applicationMode); }
	inline CommPrintProcessDataCore& setApplicationMode(const DomainPrint::ApplicationModeTypeEnum &applicationMode) { idl_CommPrintProcessData.applicationMode = applicationMode; return *this; }
};

} /* namespace DomainPrint */
#endif /* DOMAINPRINT_COMMPRINTPROCESSDATA_CORE_H_ */
