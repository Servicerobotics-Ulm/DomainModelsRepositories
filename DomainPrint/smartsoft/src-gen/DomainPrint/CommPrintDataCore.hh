//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINPRINT_COMMPRINTDATA_CORE_H_
#define DOMAINPRINT_COMMPRINTDATA_CORE_H_

#include "DomainPrint/CommPrintDataData.hh"
#include "DomainPrint/enumPrintDataEnum.hh"

#include <iostream>
#include <string>
#include <list>

namespace DomainPrint {
	
class CommPrintDataCore {
protected:
	// data structure
	DomainPrintIDL::CommPrintData idl_CommPrintData;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef DomainPrintIDL::CommPrintData DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommPrintDataCore();
	CommPrintDataCore(const DATATYPE &data);
	// default destructor
	virtual ~CommPrintDataCore();
	
	const DATATYPE& get() const { return idl_CommPrintData; }
	operator const DATATYPE&() const { return idl_CommPrintData; }
	DATATYPE& set() { return idl_CommPrintData; }

	static inline std::string identifier(void) { return "DomainPrint::CommPrintData"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Data
	inline std::string getData() const { return idl_CommPrintData.data; }
	inline CommPrintDataCore& setData(const std::string &data) { idl_CommPrintData.data = data; return *this; }
	
	// getter and setter for element Format
	inline DomainPrint::PrintDataEnum getFormat() const { return DomainPrint::PrintDataEnum(idl_CommPrintData.format); }
	inline CommPrintDataCore& setFormat(const DomainPrint::PrintDataEnum &format) { idl_CommPrintData.format = format; return *this; }
};

} /* namespace DomainPrint */
#endif /* DOMAINPRINT_COMMPRINTDATA_CORE_H_ */
