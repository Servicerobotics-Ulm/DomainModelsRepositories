//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "DomainPrint/CommPrintProcessDataCore.hh"

// serialization/deserialization operators
//#include "DomainPrint/CommPrintProcessDataACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace DomainPrint 
{
	const char* CommPrintProcessDataCore::getCompiledHash()
	{
		return DomainPrintIDL::REPO_HASH;
	}
	
	void CommPrintProcessDataCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for DomainPrint::CommKeyValue(idl_CommPrintProcessData.data)
		DomainPrint::CommKeyValue::getAllHashValues(hashes);
	}
	
	void CommPrintProcessDataCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "CommPrintProcessDataCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for DomainPrint::CommKeyValue(idl_CommPrintProcessData.data)
		DomainPrint::CommKeyValue::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t CommPrintProcessDataCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		std::vector<DomainPrintIDL::CommKeyValue>::const_iterator data_dataIt;
		for(data_dataIt=data.data.begin(); data_dataIt!=data.data.end(); data_dataIt++) {
			seed += DomainPrint::CommKeyValue::generateDataHash(*data_dataIt);
		}
		boost::hash_combine(seed, std::string(data.templateID.c_str()));
		boost::hash_combine(seed, data.applicationMode);
		
		return seed;
	}
	#endif
	
	// default constructor
	CommPrintProcessDataCore::CommPrintProcessDataCore()
	:	idl_CommPrintProcessData()
	{  
		setData(std::vector<DomainPrint::CommKeyValue>());
		setTemplateID("");
		setApplicationMode(DomainPrint::ApplicationModeTypeEnum());
	}
	
	CommPrintProcessDataCore::CommPrintProcessDataCore(const DATATYPE &data)
	:	idl_CommPrintProcessData(data)
	{  }

	CommPrintProcessDataCore::~CommPrintProcessDataCore()
	{  }
	
	void CommPrintProcessDataCore::to_ostream(std::ostream &os) const
	{
	  os << "CommPrintProcessData(";
	  std::vector<DomainPrint::CommKeyValue>::const_iterator dataIt;
	  std::vector<DomainPrint::CommKeyValue> dataList = getDataCopy();
	  for(dataIt=dataList.begin(); dataIt!=dataList.end(); dataIt++) {
	  	dataIt->to_ostream(os);
	  }
	  os << getTemplateID() << " ";
	  getApplicationMode().to_ostream(os);
	  os << ") ";
	}
	
	// convert to xml stream
	void CommPrintProcessDataCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		std::vector<DomainPrint::CommKeyValue>::const_iterator dataIt;
		std::vector<DomainPrint::CommKeyValue> dataList = getDataCopy();
		counter = 0;
		os << indent << "<dataList n=\"" << dataList.size() << "\">";
		for(dataIt=dataList.begin(); dataIt!=dataList.end(); dataIt++) {
			os << indent << "<data i=\"" << counter++ << "\">";
			dataIt->to_xml(os, indent);
			os << indent << "</data>";
		}
		os << indent << "</dataList>";
		os << indent << "<templateID>" << getTemplateID() << "</templateID>";
		os << indent << "<applicationMode>";
		getApplicationMode().to_xml(os, indent);
		os << indent << "</applicationMode>";
	}
	
	// restore from xml stream
	void CommPrintProcessDataCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_dataList("<dataList n=\"");
		static const Smart::KnuthMorrisPratt kmp_data("\">");
		static const Smart::KnuthMorrisPratt kmp_templateID("<templateID>");
		static const Smart::KnuthMorrisPratt kmp_applicationMode("<applicationMode>");
		
		if(kmp_dataList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			DomainPrint::CommKeyValue dataItem;
			std::vector<DomainPrint::CommKeyValue> dataList;
			kmp_data.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_data.search(is)) {
					dataItem.from_xml(is);
					dataList.push_back(dataItem);
				}
			}
			setData(dataList);
		}
		if(kmp_templateID.search(is)) {
			std::string templateIDItem;
			is >> templateIDItem;
			setTemplateID(templateIDItem);
		}
		if(kmp_applicationMode.search(is)) {
			DomainPrint::ApplicationModeTypeEnum applicationModeItem;
			applicationModeItem.from_xml(is);
			setApplicationMode(applicationModeItem);
		}
	}
	
	/*
	void CommPrintProcessDataCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		DomainPrintIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(DomainPrintIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see CommPrintProcessDataACE.hh)
		cdr << idl_CommPrintProcessData;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_CommPrintProcessData);
		cdr << data_hash;
		// std::cout << "CommPrintProcessDataCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void CommPrintProcessDataCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		DomainPrintIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see CommPrintProcessDataACE.hh)
		cdr >> idl_CommPrintProcessData;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_CommPrintProcessData);
		assert(data_hash == own_hash);
		// std::cout << "CommPrintProcessDataCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace DomainPrint */
