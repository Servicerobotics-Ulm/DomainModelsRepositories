//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommPrintProcessDataJSON.hh"

#include "DomainPrintJSON/CommKeyValueJSON.hh"
#include <DomainPrint/enumApplicationModeTypeEnum.hh>

namespace DomainPrintIDL {

void to_json(const DomainPrintIDL::CommPrintProcessData& obj, nlohmann::json& j)
{
	// data: CommKeyValue[]
	for(size_t idx=0; idx < obj.data.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.data.at(idx), array_element);
		j["data"].emplace_back(array_element);
	}
	// templateID: String
	j["templateID"] = obj.templateID;
	// applicationMode: ApplicationModeTypeEnum
	j["applicationMode"] = DomainPrint::ApplicationModeTypeEnum(obj.applicationMode).to_string(false);
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, DomainPrintIDL::CommPrintProcessData& obj)
{
	// data: CommKeyValue[]
	if(j.contains("data") && j["data"].is_array()) {
		auto jdata = j["data"];
		obj.data.resize(jdata.size());
		for(size_t idx=0; idx < jdata.size(); idx++) {
			// convert the json array values individually
			if(jdata.at(idx).is_object()) {
				// from_json(jdata.at(idx), obj.data.at(idx));
				obj.data[idx] = jdata[idx].get<DomainPrintIDL::CommKeyValue>();
			}
		}
	}
	// templateID: String
	if(j.contains("templateID") && j["templateID"].is_string()) {
		obj.templateID = j["templateID"].get<std::string>();
	}
	// applicationMode: ApplicationModeTypeEnum
	if(j.contains("applicationMode") && j["applicationMode"].is_string()) {
		obj.applicationMode = DomainPrint::ApplicationModeTypeEnum::from_string(j["applicationMode"].get<std::string>());
	}
}

} // end namespace DomainPrintIDL
