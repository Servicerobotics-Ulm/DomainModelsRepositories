//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMTRACKINGOBJECTS_COMMDETECTEDMARKERLIST_H_
#define COMMTRACKINGOBJECTS_COMMDETECTEDMARKERLIST_H_

#include "CommTrackingObjects/CommDetectedMarkerListCore.hh"

namespace CommTrackingObjects {
		
class CommDetectedMarkerList : public CommDetectedMarkerListCore {
	public:
		// default constructors
		CommDetectedMarkerList();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommDetectedMarkerList(const std::vector<CommTrackingObjects::CommDetectedMarker> &markers);
		
		CommDetectedMarkerList(const CommDetectedMarkerListCore &commDetectedMarkerList);
		CommDetectedMarkerList(const DATATYPE &commDetectedMarkerList);
		virtual ~CommDetectedMarkerList();
		
		// use framework specific getter and setter methods from core (base) class
		using CommDetectedMarkerListCore::get;
		using CommDetectedMarkerListCore::set;
		
		//
		// feel free to add customized methods here
		//
		void add_CommDetectedMarker(CommTrackingObjects::CommDetectedMarker& marker);
		CommBasicObjects::CommPose3d get_tag_pose_in_sensor_frame_by_index(size_t index) const;
		CommBasicObjects::CommPose3d get_tag_pose_in_robot_frame_by_index(size_t index) const;
		CommBasicObjects::CommPose3d get_tag_pose_in_world_frame_by_index(size_t index) const;

		CommBasicObjects::CommPose3d get_tag_pose_in_sensor_frame_by_tag_id(unsigned int tag_id) const;
		CommBasicObjects::CommPose3d get_tag_pose_in_robot_frame_by_tag_id(unsigned int tag_id) const;
		CommBasicObjects::CommPose3d get_tag_pose_in_world_frame_by_tag_id(unsigned int tag_id) const;

		bool getTagIndexByID(unsigned int tag_id, size_t& index) const;

		bool getTagByID(unsigned int id, CommTrackingObjects::CommDetectedMarker& tag) const;
		bool setTagByID(unsigned int id, const CommTrackingObjects::CommDetectedMarker tag);
};

inline std::ostream &operator<<(std::ostream &os, const CommDetectedMarkerList &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommTrackingObjects */
#endif /* COMMTRACKINGOBJECTS_COMMDETECTEDMARKERLIST_H_ */
