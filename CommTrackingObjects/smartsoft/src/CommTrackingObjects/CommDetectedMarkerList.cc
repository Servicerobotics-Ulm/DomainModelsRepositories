//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "CommTrackingObjects/CommDetectedMarkerList.hh"

using namespace CommTrackingObjects;

CommDetectedMarkerList::CommDetectedMarkerList()
:	CommDetectedMarkerListCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommDetectedMarkerList::CommDetectedMarkerList(const std::vector<CommTrackingObjects::CommDetectedMarker> &markers)
:	CommDetectedMarkerListCore() // base constructor sets default values as defined in the model
{
	setMarkers(markers);
}
 */

CommDetectedMarkerList::CommDetectedMarkerList(const CommDetectedMarkerListCore &commDetectedMarkerList)
:	CommDetectedMarkerListCore(commDetectedMarkerList)
{  }

CommDetectedMarkerList::CommDetectedMarkerList(const DATATYPE &commDetectedMarkerList)
:	CommDetectedMarkerListCore(commDetectedMarkerList)
{  }

CommDetectedMarkerList::~CommDetectedMarkerList()
{  }

void CommDetectedMarkerList::add_CommDetectedMarker(CommTrackingObjects::CommDetectedMarker& marker)
{
	idl_CommDetectedMarkerList.markers.push_back(marker);
}
CommBasicObjects::CommPose3d CommDetectedMarkerList::get_tag_pose_in_sensor_frame_by_index(size_t index) const
{
	return idl_CommDetectedMarkerList.markers.at(index).pose;
}

CommBasicObjects::CommPose3d CommDetectedMarkerList::get_tag_pose_in_robot_frame_by_index(size_t index) const
{
	arma::mat measurment = static_cast<CommBasicObjects::CommPose3d>(idl_CommDetectedMarkerList.markers.at(index).pose).getHomogeneousMatrix(1.0);
	arma::mat sensorPose;
	if(getSingle_pose() == true){
		sensorPose = getSensor_pose().getHomogeneousMatrix(1.0);
	} else {
		sensorPose = static_cast<CommBasicObjects::CommPose3d>(idl_CommDetectedMarkerList.markers.at(index).sensor_pose).getHomogeneousMatrix(1.0);
	}

	arma::mat offset = sensorPose * measurment;
	return CommBasicObjects::CommPose3d(offset,1.0);

}

CommBasicObjects::CommPose3d CommDetectedMarkerList::get_tag_pose_in_world_frame_by_index(size_t index) const
{
	arma::mat measurment = static_cast<CommBasicObjects::CommPose3d>(idl_CommDetectedMarkerList.markers.at(index).pose).getHomogeneousMatrix(1.0);
	arma::mat sensorPose;
	arma::mat robotPose;

	if(getSingle_pose() == true){
		sensorPose = getSensor_pose().getHomogeneousMatrix(1.0);
		robotPose = getBase_state().getBasePose().getPose3D().getHomogeneousMatrix(1.0);
	} else {
		sensorPose = static_cast<CommBasicObjects::CommPose3d>(idl_CommDetectedMarkerList.markers.at(index).sensor_pose).getHomogeneousMatrix(1.0);
		robotPose = static_cast<CommBasicObjects::CommPose3d>(idl_CommDetectedMarkerList.markers.at(index).base_state.basePose.pose3D).getHomogeneousMatrix(1.0);
	}


	arma::mat offset = robotPose * sensorPose * measurment;
	return CommBasicObjects::CommPose3d(offset,1.0);
}

CommBasicObjects::CommPose3d CommDetectedMarkerList::get_tag_pose_in_sensor_frame_by_tag_id(unsigned int tag_id) const
{
	for(int i =0; i<idl_CommDetectedMarkerList.markers.size(); ++i)
	{
		if(idl_CommDetectedMarkerList.markers[i].id == tag_id)
		{
			return idl_CommDetectedMarkerList.markers[i].pose;
		}
	}

	return CommBasicObjects::CommPose3d(0,0,0,0,0,0);
}


bool CommDetectedMarkerList::getTagIndexByID(unsigned int tag_id, size_t& index) const {

	for(int i =0; i<idl_CommDetectedMarkerList.markers.size(); ++i)
	{
		if(idl_CommDetectedMarkerList.markers[i].id == tag_id)
		{
			index = i;
			return true;
		}
	}
	return false;
}

CommBasicObjects::CommPose3d CommDetectedMarkerList::get_tag_pose_in_robot_frame_by_tag_id(unsigned int tag_id) const
{

	arma::mat measurment = get_tag_pose_in_sensor_frame_by_tag_id(tag_id).getHomogeneousMatrix(1.0);
	arma::mat sensorPose;


	if(getSingle_pose() == true){
		sensorPose = getSensor_pose().getHomogeneousMatrix(1.0);
	} else {
		size_t tag_index;
		bool found = getTagIndexByID(tag_id,tag_index);

		sensorPose = static_cast<CommBasicObjects::CommPose3d>(idl_CommDetectedMarkerList.markers.at(tag_index).sensor_pose).getHomogeneousMatrix(1.0);
	}

	arma::mat offset = sensorPose * measurment;
	return CommBasicObjects::CommPose3d(offset,1.0);

}
CommBasicObjects::CommPose3d CommDetectedMarkerList::get_tag_pose_in_world_frame_by_tag_id(unsigned int tag_id) const
{
	arma::mat measurment = get_tag_pose_in_sensor_frame_by_tag_id(tag_id).getHomogeneousMatrix(1.0);
	arma::mat sensorPose;
	arma::mat robotPose;

	if(getSingle_pose() == true){
			sensorPose = getSensor_pose().getHomogeneousMatrix(1.0);
			robotPose = getBase_state().getBasePose().getPose3D().getHomogeneousMatrix(1.0);
	} else {
		size_t tag_index;
		bool found = getTagIndexByID(tag_id,tag_index);

		sensorPose = static_cast<CommBasicObjects::CommPose3d>(idl_CommDetectedMarkerList.markers.at(tag_index).sensor_pose).getHomogeneousMatrix(1.0);
		robotPose = static_cast<CommBasicObjects::CommPose3d>(idl_CommDetectedMarkerList.markers.at(tag_index).base_state.basePose.pose3D).getHomogeneousMatrix(1.0);
	}


	arma::mat offset = robotPose * sensorPose * measurment;
	return CommBasicObjects::CommPose3d(offset,1.0);

}


bool CommDetectedMarkerList::getTagByID(unsigned int id, CommTrackingObjects::CommDetectedMarker& tag) const{
        for(unsigned int i=0;i<getMarkersSize();++i){
                if(getMarkersElemAtPos(i).getId()==id){
                        tag = getMarkersElemAtPos(i);
                        return true;
                }
        }
        return false;
}

bool CommDetectedMarkerList::setTagByID(unsigned int id, const CommTrackingObjects::CommDetectedMarker tag){
        for(unsigned int i=0;i<getMarkersSize();++i){
                if(getMarkersElemAtPos(i).getId()==id){
                        setMarkersElemAtPos(i,tag);
                        return true;
                }
        }
        return false;
}
