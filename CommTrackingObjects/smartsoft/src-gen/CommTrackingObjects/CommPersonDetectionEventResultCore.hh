//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMTRACKINGOBJECTS_COMMPERSONDETECTIONEVENTRESULT_CORE_H_
#define COMMTRACKINGOBJECTS_COMMPERSONDETECTIONEVENTRESULT_CORE_H_

#include "CommTrackingObjects/CommPersonDetectionEventResultData.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommTrackingObjects {
	
class CommPersonDetectionEventResultCore {
protected:
	// data structure
	CommTrackingObjectsIDL::CommPersonDetectionEventResult idl_CommPersonDetectionEventResult;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommTrackingObjectsIDL::CommPersonDetectionEventResult DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommPersonDetectionEventResultCore();
	CommPersonDetectionEventResultCore(const DATATYPE &data);
	// default destructor
	virtual ~CommPersonDetectionEventResultCore();
	
	const DATATYPE& get() const { return idl_CommPersonDetectionEventResult; }
	operator const DATATYPE&() const { return idl_CommPersonDetectionEventResult; }
	DATATYPE& set() { return idl_CommPersonDetectionEventResult; }

	static inline std::string identifier(void) { return "CommTrackingObjects::CommPersonDetectionEventResult"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Environment_id
	inline unsigned int getEnvironment_id() const { return idl_CommPersonDetectionEventResult.environment_id; }
	inline CommPersonDetectionEventResultCore& setEnvironment_id(const unsigned int &environment_id) { idl_CommPersonDetectionEventResult.environment_id = environment_id; return *this; }
	
	// getter and setter for element Person_id
	/**
	 * Getter methods for idl_CommPersonDetectionEventResult.person_id of type vector<unsigned int>
	 */
	inline std::vector<unsigned int>& getPerson_idRef() { return idl_CommPersonDetectionEventResult.person_id; }
	inline std::vector<unsigned int> getPerson_idCopy() const {
		return std::vector<unsigned int>(idl_CommPersonDetectionEventResult.person_id.begin(), idl_CommPersonDetectionEventResult.person_id.end());
	}
	inline unsigned int getPerson_idElemAtPos(const size_t &pos) const { return idl_CommPersonDetectionEventResult.person_id[pos]; }
	inline size_t getPerson_idSize() const { return idl_CommPersonDetectionEventResult.person_id.size(); }
	inline bool isPerson_idEmpty() const { return idl_CommPersonDetectionEventResult.person_id.empty(); }
	/**
	 * Setter methods for idl_CommPersonDetectionEventResult.person_id of type vector<unsigned int>
	 */
	inline CommPersonDetectionEventResultCore& setPerson_id(const std::vector<unsigned int> &person_id) { idl_CommPersonDetectionEventResult.person_id = person_id; return *this; }
	inline bool setPerson_idElemAtPos(const size_t &pos, const unsigned int &elem) {
		if(pos < idl_CommPersonDetectionEventResult.person_id.size()) {
			idl_CommPersonDetectionEventResult.person_id[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertPerson_idVectorAtPos(const size_t &pos, const std::vector<unsigned int> &data) {
		if(pos <= idl_CommPersonDetectionEventResult.person_id.size()) {
			idl_CommPersonDetectionEventResult.person_id.insert(idl_CommPersonDetectionEventResult.person_id.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizePerson_id(const size_t &size) { idl_CommPersonDetectionEventResult.person_id.resize(size); }
	inline bool erasePerson_idElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommPersonDetectionEventResult.person_id.size() ) {
			idl_CommPersonDetectionEventResult.person_id.erase(idl_CommPersonDetectionEventResult.person_id.begin()+pos, idl_CommPersonDetectionEventResult.person_id.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearPerson_id() { idl_CommPersonDetectionEventResult.person_id.clear(); }
};

} /* namespace CommTrackingObjects */
#endif /* COMMTRACKINGOBJECTS_COMMPERSONDETECTIONEVENTRESULT_CORE_H_ */
