//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMTRACKINGOBJECTS_COMMTRACKINGGOAL_CORE_H_
#define COMMTRACKINGOBJECTS_COMMTRACKINGGOAL_CORE_H_

#include "CommTrackingObjects/CommTrackingGoalData.hh"
#include "CommTrackingObjects/enumTrackingGoalType.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommTrackingObjects {
	
class CommTrackingGoalCore {
protected:
	// data structure
	CommTrackingObjectsIDL::CommTrackingGoal idl_CommTrackingGoal;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommTrackingObjectsIDL::CommTrackingGoal DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommTrackingGoalCore();
	CommTrackingGoalCore(const DATATYPE &data);
	// default destructor
	virtual ~CommTrackingGoalCore();
	
	const DATATYPE& get() const { return idl_CommTrackingGoal; }
	operator const DATATYPE&() const { return idl_CommTrackingGoal; }
	DATATYPE& set() { return idl_CommTrackingGoal; }

	static inline std::string identifier(void) { return "CommTrackingObjects::CommTrackingGoal"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element TrackingType
	inline CommTrackingObjects::TrackingGoalType getTrackingType() const { return CommTrackingObjects::TrackingGoalType(idl_CommTrackingGoal.trackingType); }
	inline CommTrackingGoalCore& setTrackingType(const CommTrackingObjects::TrackingGoalType &trackingType) { idl_CommTrackingGoal.trackingType = trackingType; return *this; }
	
	// getter and setter for element Angle
	inline double getAngle() const { return idl_CommTrackingGoal.angle; }
	inline CommTrackingGoalCore& setAngle(const double &angle) { idl_CommTrackingGoal.angle = angle; return *this; }
	
	// getter and setter for element Distance
	inline double getDistance() const { return idl_CommTrackingGoal.distance; }
	inline CommTrackingGoalCore& setDistance(const double &distance) { idl_CommTrackingGoal.distance = distance; return *this; }
	
	// getter and setter for element X
	inline double getX() const { return idl_CommTrackingGoal.x; }
	inline CommTrackingGoalCore& setX(const double &x) { idl_CommTrackingGoal.x = x; return *this; }
	
	// getter and setter for element Y
	inline double getY() const { return idl_CommTrackingGoal.y; }
	inline CommTrackingGoalCore& setY(const double &y) { idl_CommTrackingGoal.y = y; return *this; }
	
	// getter and setter for element IsValid
	inline bool getIsValid() const { return idl_CommTrackingGoal.isValid; }
	inline CommTrackingGoalCore& setIsValid(const bool &isValid) { idl_CommTrackingGoal.isValid = isValid; return *this; }
	
	// getter and setter for element Cov
	/**
	 * Getter methods for idl_CommTrackingGoal.cov of type vector<double>
	 */
	inline std::vector<double>& getCovRef() { return idl_CommTrackingGoal.cov; }
	inline std::vector<double> getCovCopy() const {
		return std::vector<double>(idl_CommTrackingGoal.cov.begin(), idl_CommTrackingGoal.cov.end());
	}
	inline double getCovElemAtPos(const size_t &pos) const { return idl_CommTrackingGoal.cov[pos]; }
	inline size_t getCovSize() const { return idl_CommTrackingGoal.cov.size(); }
	inline bool isCovEmpty() const { return idl_CommTrackingGoal.cov.empty(); }
	/**
	 * Setter methods for idl_CommTrackingGoal.cov of type vector<double>
	 */
	inline CommTrackingGoalCore& setCov(const std::vector<double> &cov) { idl_CommTrackingGoal.cov = cov; return *this; }
	inline bool setCovElemAtPos(const size_t &pos, const double &elem) {
		if(pos < idl_CommTrackingGoal.cov.size()) {
			idl_CommTrackingGoal.cov[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertCovVectorAtPos(const size_t &pos, const std::vector<double> &data) {
		if(pos <= idl_CommTrackingGoal.cov.size()) {
			idl_CommTrackingGoal.cov.insert(idl_CommTrackingGoal.cov.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeCov(const size_t &size) { idl_CommTrackingGoal.cov.resize(size); }
	inline bool eraseCovElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommTrackingGoal.cov.size() ) {
			idl_CommTrackingGoal.cov.erase(idl_CommTrackingGoal.cov.begin()+pos, idl_CommTrackingGoal.cov.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearCov() { idl_CommTrackingGoal.cov.clear(); }
	
	// getter and setter for element GoalCount
	inline unsigned long int getGoalCount() const { return idl_CommTrackingGoal.goalCount; }
	inline CommTrackingGoalCore& setGoalCount(const unsigned long int &goalCount) { idl_CommTrackingGoal.goalCount = goalCount; return *this; }
};

} /* namespace CommTrackingObjects */
#endif /* COMMTRACKINGOBJECTS_COMMTRACKINGGOAL_CORE_H_ */
