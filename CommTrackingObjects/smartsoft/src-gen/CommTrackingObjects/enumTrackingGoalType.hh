//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMTRACKINGOBJECTS_TRACKINGGOALTYPE_ENUM_H_
#define COMMTRACKINGOBJECTS_TRACKINGGOALTYPE_ENUM_H_

#include <CommTrackingObjects/enumTrackingGoalTypeData.hh>

#include <string>
#include <iostream>
#include <locale>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

namespace CommTrackingObjects {
	
	class TrackingGoalType {
	private:
		CommTrackingObjectsIDL::TrackingGoalType value;
		
	public:
		enum ENUM_TrackingGoalType {
			ENUM_VALUE_UNDEFINED = 0,
			XY_ROBOT = 1,
			XY_MAP = 2,
			XY_MAP_RAW = 3,
			ANGLE_DIST = 4
		};
		
		// default constructor
		TrackingGoalType() { 
			value = ENUM_VALUE_UNDEFINED;
		}
		
		// copy constructor for enum type
		TrackingGoalType(ENUM_TrackingGoalType e) {
			value = static_cast<int>(e);
		}
		
		// copy constructor for IDL type (which is typically int)
		TrackingGoalType(CommTrackingObjectsIDL::TrackingGoalType e) {
			value = e;
		}
		
		//const CommTrackingObjectsIDL::TrackingGoalType& get() const { return value; }
		
		// ENUM operator
		operator ENUM_TrackingGoalType() const {
			return static_cast<ENUM_TrackingGoalType>(value);
		}
		
		// compare operator
		bool operator == (const ENUM_TrackingGoalType t) const {
			return this->value == t;
		}
		
		std::string to_string(const bool &use_fqn=true) const {
			std::string result = "";
			if(use_fqn == true) {
				result = "TrackingGoalType::";
			}
			switch (value) {
				case XY_ROBOT:
					result += "XY_ROBOT";
					break;
				case XY_MAP:
					result += "XY_MAP";
					break;
				case XY_MAP_RAW:
					result += "XY_MAP_RAW";
					break;
				case ANGLE_DIST:
					result += "ANGLE_DIST";
					break;
				default:
					result += "ENUM_VALUE_UNDEFINED";
					break;
			};
			return result;
		}
		
		static TrackingGoalType from_string(const std::string &value) {
			std::string input = value;
			std::locale l;
			for(auto &c: input) {
				// convert all characters to lower case (so string comparison works regardless of small/capital letters)
				c = std::tolower(c,l);
			}
			std::string base_name = "trackinggoaltype::";
			if(input.compare(0, base_name.length(), base_name) == 0) {
				// remove basename from comparing the actual enumeration
				input.erase(0,base_name.length());
			}
			if(input == "xy_robot"){
				return TrackingGoalType(XY_ROBOT);
			}
			if(input == "xy_map"){
				return TrackingGoalType(XY_MAP);
			}
			if(input == "xy_map_raw"){
				return TrackingGoalType(XY_MAP_RAW);
			}
			if(input == "angle_dist"){
				return TrackingGoalType(ANGLE_DIST);
			}
			// default (if none of the preceding options match)
			return TrackingGoalType();
		}
		
		// helper method to easily implement output stream
		void to_ostream(std::ostream &os = std::cout) const {
			os << to_string();
		}
		
		// convert to xml stream
		void to_xml(std::ostream &os, const std::string &indent = "") const {
			os << indent << "<value>" << value << "</value>";
		}
		
		// restore from xml stream
		void from_xml(std::istream &is) {
			static const Smart::KnuthMorrisPratt kmp_value("<value>");
			if(kmp_value.search(is)) {
				is >> value;
			}
		}
	
	};
	
	inline std::ostream &operator<<(std::ostream &os, const TrackingGoalType &e)
	{
		e.to_ostream(os);
		return os;
	}
};

#endif
