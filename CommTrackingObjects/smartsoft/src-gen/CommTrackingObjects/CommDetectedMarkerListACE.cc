//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommTrackingObjects/CommDetectedMarkerListACE.hh"
#include <ace/SString.h>
#include "CommBasicObjects/CommBaseStateACE.hh"
#include "CommBasicObjects/CommPose3dACE.hh"
#include "CommTrackingObjects/CommDetectedMarkerACE.hh"

// serialization operator for element CommDetectedMarkerList
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommTrackingObjectsIDL::CommDetectedMarkerList &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element markers
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.markers.size());
	std::vector<CommTrackingObjectsIDL::CommDetectedMarker>::const_iterator data_markersIt;
	for(data_markersIt=data.markers.begin(); data_markersIt!=data.markers.end(); data_markersIt++) {
		good_bit = good_bit && cdr << *data_markersIt;
	}
	// serialize list-element sensor_pose
	good_bit = good_bit && cdr << data.sensor_pose;
	// serialize list-element base_state
	good_bit = good_bit && cdr << data.base_state;
	// serialize list-element single_pose
	good_bit = good_bit && cdr.write_boolean(data.single_pose);
	// serialize list-element valid
	good_bit = good_bit && cdr.write_boolean(data.valid);
	
	return good_bit;
}

// de-serialization operator for element CommDetectedMarkerList
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommTrackingObjectsIDL::CommDetectedMarkerList &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize list-type element markers
	ACE_CDR::ULong data_markersNbr;
	good_bit = good_bit && cdr >> data_markersNbr;
	data.markers.clear();
	CommTrackingObjectsIDL::CommDetectedMarker data_markersItem;
	for(ACE_CDR::ULong i=0; i<data_markersNbr; ++i) {
		good_bit = good_bit && cdr >> data_markersItem;
		data.markers.push_back(data_markersItem);
	}
	// deserialize type element sensor_pose
	good_bit = good_bit && cdr >> data.sensor_pose;
	// deserialize type element base_state
	good_bit = good_bit && cdr >> data.base_state;
	// deserialize type element single_pose
	good_bit = good_bit && cdr.read_boolean(data.single_pose);
	// deserialize type element valid
	good_bit = good_bit && cdr.read_boolean(data.valid);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommDetectedMarkerList
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommTrackingObjects::CommDetectedMarkerList &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommDetectedMarkerList
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommTrackingObjects::CommDetectedMarkerList &obj)
{
	return cdr >> obj.set();
}
