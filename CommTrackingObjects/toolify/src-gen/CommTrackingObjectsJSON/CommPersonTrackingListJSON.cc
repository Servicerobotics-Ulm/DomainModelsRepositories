//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommPersonTrackingListJSON.hh"

#include "CommTrackingObjectsJSON/CommTrackedPersonJSON.hh"

namespace CommTrackingObjectsIDL {

void to_json(const CommTrackingObjectsIDL::CommPersonTrackingList& obj, nlohmann::json& j)
{
	// trackedPersons: CommTrackedPerson[]
	for(size_t idx=0; idx < obj.trackedPersons.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.trackedPersons.at(idx), array_element);
		j["trackedPersons"].emplace_back(array_element);
	}
	// followedPerson: Int32
	j["followedPerson"] = obj.followedPerson;
	// isValid: Boolean
	j["isValid"] = obj.isValid;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommTrackingObjectsIDL::CommPersonTrackingList& obj)
{
	// trackedPersons: CommTrackedPerson[]
	if(j.contains("trackedPersons") && j["trackedPersons"].is_array()) {
		auto jtrackedPersons = j["trackedPersons"];
		obj.trackedPersons.resize(jtrackedPersons.size());
		for(size_t idx=0; idx < jtrackedPersons.size(); idx++) {
			// convert the json array values individually
			if(jtrackedPersons.at(idx).is_object()) {
				// from_json(jtrackedPersons.at(idx), obj.trackedPersons.at(idx));
				obj.trackedPersons[idx] = jtrackedPersons[idx].get<CommTrackingObjectsIDL::CommTrackedPerson>();
			}
		}
	}
	// followedPerson: Int32
	if(j.contains("followedPerson") && j["followedPerson"].is_number_integer()) {
		obj.followedPerson = j["followedPerson"].get<int>();
	}
	// isValid: Boolean
	if(j.contains("isValid") && j["isValid"].is_boolean()) {
		obj.isValid = j["isValid"].get<bool>();
	}
}

} // end namespace CommTrackingObjectsIDL
