//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommPathFreeAreaJSON.hh"


namespace CommRobotinoObjectsIDL {

void to_json(const CommRobotinoObjectsIDL::CommPathFreeArea& obj, nlohmann::json& j)
{
	// areaID: Int32
	j["areaID"] = obj.areaID;
	// maxOccupancy: Int32
	j["maxOccupancy"] = obj.maxOccupancy;
	// robotIDs: Int32[]
	j["robotIDs"] = obj.robotIDs;
	// nodeXvector: Double[]
	j["nodeXvector"] = obj.nodeXvector;
	// nodeYvector: Double[]
	j["nodeYvector"] = obj.nodeYvector;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommRobotinoObjectsIDL::CommPathFreeArea& obj)
{
	// areaID: Int32
	if(j.contains("areaID") && j["areaID"].is_number_integer()) {
		obj.areaID = j["areaID"].get<int>();
	}
	// maxOccupancy: Int32
	if(j.contains("maxOccupancy") && j["maxOccupancy"].is_number_integer()) {
		obj.maxOccupancy = j["maxOccupancy"].get<int>();
	}
	// robotIDs: Int32[]
	if(j.contains("robotIDs") && j["robotIDs"].is_array()) {
		obj.robotIDs = j["robotIDs"].get<std::vector<int>>();
	}
	// nodeXvector: Double[]
	if(j.contains("nodeXvector") && j["nodeXvector"].is_array()) {
		obj.nodeXvector = j["nodeXvector"].get<std::vector<double>>();
	}
	// nodeYvector: Double[]
	if(j.contains("nodeYvector") && j["nodeYvector"].is_array()) {
		obj.nodeYvector = j["nodeYvector"].get<std::vector<double>>();
	}
}

} // end namespace CommRobotinoObjectsIDL
