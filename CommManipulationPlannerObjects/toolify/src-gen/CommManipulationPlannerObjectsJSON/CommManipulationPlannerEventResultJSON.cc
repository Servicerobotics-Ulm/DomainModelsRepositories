//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommManipulationPlannerEventResultJSON.hh"

#include <CommManipulationPlannerObjects/enumManipulationPlannerEvent.hh>
#include "CommBasicObjectsJSON/CommPose3dJSON.hh"

namespace CommManipulationPlannerObjectsIDL {

void to_json(const CommManipulationPlannerObjectsIDL::CommManipulationPlannerEventResult& obj, nlohmann::json& j)
{
	// event: ManipulationPlannerEvent
	j["event"] = CommManipulationPlannerObjects::ManipulationPlannerEvent(obj.event).to_string(false);
	// pose: CommPose3d
	to_json(obj.pose, j["pose"]);
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommManipulationPlannerObjectsIDL::CommManipulationPlannerEventResult& obj)
{
	// event: ManipulationPlannerEvent
	if(j.contains("event") && j["event"].is_string()) {
		obj.event = CommManipulationPlannerObjects::ManipulationPlannerEvent::from_string(j["event"].get<std::string>());
	}
	// pose: CommPose3d
	if(j.contains("pose") && j["pose"].is_object()) {
		//from_json(j["pose"], obj.pose);
		obj.pose = j["pose"].get<CommBasicObjectsIDL::CommPose3d>();
	}
}

} // end namespace CommManipulationPlannerObjectsIDL
